
Studemeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001944  08001944  00011944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a2c  08001a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a2c  08001a2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a2c  08001a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a30  08001a30  00011a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  08001a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001a40  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002699  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c55  00000000  00000000  00022718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000300  00000000  00000000  00023370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000021e  00000000  00000000  00023670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001111  00000000  00000000  0002388e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a6e  00000000  00000000  0002499f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004b08  00000000  00000000  0002640d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000a34  00000000  00000000  0002af18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0002b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800192c 	.word	0x0800192c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800192c 	.word	0x0800192c

080001d4 <ADC_vInit>:
		}
	}
}

void ADC_vInit(const ADC_ConfigType* Ptr_config)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	if(NULL != Ptr_config)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d01f      	beq.n	8000222 <ADC_vInit+0x4e>
	{
		/* Choose resolution and set scan mode */
		ADC->CR1 = (Ptr_config->res << RES) | (Ptr_config->scanMode << SCAN);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	061a      	lsls	r2, r3, #24
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	785b      	ldrb	r3, [r3, #1]
 80001ec:	021b      	lsls	r3, r3, #8
 80001ee:	431a      	orrs	r2, r3
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <ADC_vInit+0x5c>)
 80001f2:	605a      	str	r2, [r3, #4]
		/* Set clock Prescaler for ADC */
		ADC_CCR = (ADC_CCR & ~ADCPRE_MASK) | ((Ptr_config->prescaler << ADCPRE) & ADCPRE_MASK);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <ADC_vInit+0x60>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	791b      	ldrb	r3, [r3, #4]
 8000200:	041b      	lsls	r3, r3, #16
 8000202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000206:	490b      	ldr	r1, [pc, #44]	; (8000234 <ADC_vInit+0x60>)
 8000208:	4313      	orrs	r3, r2
 800020a:	600b      	str	r3, [r1, #0]
		/* configure End of conversion selection and continuous mode and Enable ADC  */
		ADC->CR2 = (Ptr_config->eachConvFlag << ECOS) | (Ptr_config->contConv << CONT) | (1 << ADON);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	789b      	ldrb	r3, [r3, #2]
 8000210:	029a      	lsls	r2, r3, #10
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	78db      	ldrb	r3, [r3, #3]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	4313      	orrs	r3, r2
 800021a:	f043 0201 	orr.w	r2, r3, #1
 800021e:	4b04      	ldr	r3, [pc, #16]	; (8000230 <ADC_vInit+0x5c>)
 8000220:	609a      	str	r2, [r3, #8]
#ifdef ENABLE_INTERRUPT
		ADC->CR1 |= (1 << EOCIE);
#endif
	}
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40012000 	.word	0x40012000
 8000234:	40012304 	.word	0x40012304

08000238 <ADC_u16ReadChannel>:
	while(!(ADC->SR & (1 << EOC)));
	return ADC->DR;
}

u16 ADC_u16ReadChannel(u8 Copy_u8Channel)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	/* Select Channel */
	ADC->SQR[2] = (ADC->SQR[2] & 0xFFFFFFE0) | Copy_u8Channel;
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <ADC_u16ReadChannel+0x48>)
 8000244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000246:	f023 021f 	bic.w	r2, r3, #31
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	490c      	ldr	r1, [pc, #48]	; (8000280 <ADC_u16ReadChannel+0x48>)
 800024e:	4313      	orrs	r3, r2
 8000250:	634b      	str	r3, [r1, #52]	; 0x34
	/* Start Conversion */
	ADC->CR2 |= (1 << SWSTART);
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <ADC_u16ReadChannel+0x48>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <ADC_u16ReadChannel+0x48>)
 8000258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800025c:	6093      	str	r3, [r2, #8]
	/* Wait till conversion is done */
	while(!(ADC->SR & (1 << EOC)));
 800025e:	bf00      	nop
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <ADC_u16ReadChannel+0x48>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f003 0302 	and.w	r3, r3, #2
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <ADC_u16ReadChannel+0x28>
	/* Return ADC reading which also clears EOC flag */
	return ADC->DR;
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <ADC_u16ReadChannel+0x48>)
 800026e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000270:	b29b      	uxth	r3, r3
}
 8000272:	4618      	mov	r0, r3
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40012000 	.word	0x40012000

08000284 <APP_voidSystickCallBackFun>:



/* Functions Implementation */
static void APP_voidSystickCallBackFun(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
	u16 gsr_reading = ADC_u16ReadChannel(GSR_PIN_NUM);
 800028a:	2000      	movs	r0, #0
 800028c:	f7ff ffd4 	bl	8000238 <ADC_u16ReadChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	80fb      	strh	r3, [r7, #6]

	if( gsr_reading < GSR_MAX_FLOATING_VALUE ) /* Sensor is not connected right */
 8000294:	88fb      	ldrh	r3, [r7, #6]
 8000296:	2b13      	cmp	r3, #19
 8000298:	d805      	bhi.n	80002a6 <APP_voidSystickCallBackFun+0x22>
	{
		/* Open Error LED */
		GPIO_voidSetPin( GSR_ERROR_LED_PORT , GSR_ERROR_LED_PIN , HIGH );
 800029a:	2201      	movs	r2, #1
 800029c:	210c      	movs	r1, #12
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 ffa2 	bl	80011e8 <GPIO_voidSetPin>
 80002a4:	e004      	b.n	80002b0 <APP_voidSystickCallBackFun+0x2c>
	}else
	{
		/* Close Error LED */
		GPIO_voidSetPin( GSR_ERROR_LED_PORT , GSR_ERROR_LED_PIN , LOW );
 80002a6:	2200      	movs	r2, #0
 80002a8:	210c      	movs	r1, #12
 80002aa:	2001      	movs	r0, #1
 80002ac:	f000 ff9c 	bl	80011e8 <GPIO_voidSetPin>
	}

	Queue_data_t q_data = { gsr_reading , 0 };
 80002b0:	88fb      	ldrh	r3, [r7, #6]
 80002b2:	803b      	strh	r3, [r7, #0]
 80002b4:	2300      	movs	r3, #0
 80002b6:	70bb      	strb	r3, [r7, #2]
	enqueue( &q_data );
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fa5a 	bl	8001774 <enqueue>

}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <APP_voidOpenWifiErrorLed>:

void APP_voidOpenWifiErrorLed(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	/* Open Error LED */
	GPIO_voidSetPin( WIFI_ERROR_LED_PORT , WIFI_ERROR_LED_PIN , HIGH );
 80002cc:	2201      	movs	r2, #1
 80002ce:	210d      	movs	r1, #13
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 ff89 	bl	80011e8 <GPIO_voidSetPin>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}

080002da <APP_voidCloseWifiErrorLed>:

void APP_voidCloseWifiErrorLed(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
	/* Open Error LED */
	GPIO_voidSetPin( WIFI_ERROR_LED_PORT , WIFI_ERROR_LED_PIN , LOW );
 80002de:	2200      	movs	r2, #0
 80002e0:	210d      	movs	r1, #13
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 ff80 	bl	80011e8 <GPIO_voidSetPin>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <APP_Init>:

void APP_Init()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
	/***** Initializations *****/
	Queue_init();
 80002f2:	f001 fa2d 	bl	8001750 <Queue_init>

	/* RCC */
	RCC_voidInitSysCls();
 80002f6:	f001 f8ff 	bl	80014f8 <RCC_voidInitSysCls>
	RCC_voidEnablePerpheralClk( AHB1 , GPIOA_ID );
 80002fa:	2100      	movs	r1, #0
 80002fc:	2000      	movs	r0, #0
 80002fe:	f001 f925 	bl	800154c <RCC_voidEnablePerpheralClk>
	RCC_voidEnablePerpheralClk( AHB1 , GPIOB_ID );
 8000302:	2101      	movs	r1, #1
 8000304:	2000      	movs	r0, #0
 8000306:	f001 f921 	bl	800154c <RCC_voidEnablePerpheralClk>
	RCC_voidEnablePerpheralClk(APB2  , ADC_ID ); /* ADC */
 800030a:	2108      	movs	r1, #8
 800030c:	2003      	movs	r0, #3
 800030e:	f001 f91d 	bl	800154c <RCC_voidEnablePerpheralClk>


	/* ADC configuration and initialization */
	GPIO_PIN_CONFIG_T gpio_config = { GSR_PORT_NUM , GSR_PIN_NUM , GPIO_ANALOG_MODE , NO_PULL , 0 , 0 , 0 };
 8000312:	2300      	movs	r3, #0
 8000314:	763b      	strb	r3, [r7, #24]
 8000316:	2300      	movs	r3, #0
 8000318:	767b      	strb	r3, [r7, #25]
 800031a:	2303      	movs	r3, #3
 800031c:	76bb      	strb	r3, [r7, #26]
 800031e:	2300      	movs	r3, #0
 8000320:	76fb      	strb	r3, [r7, #27]
 8000322:	2300      	movs	r3, #0
 8000324:	773b      	strb	r3, [r7, #28]
 8000326:	2300      	movs	r3, #0
 8000328:	777b      	strb	r3, [r7, #29]
 800032a:	2300      	movs	r3, #0
 800032c:	77bb      	strb	r3, [r7, #30]
	GPIO_voidInti( &gpio_config );
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	4618      	mov	r0, r3
 8000334:	f001 f890 	bl	8001458 <GPIO_voidInti>
	ADC_ConfigType adcConfig = {TWELVE_BIT, 0 , 0 , 0 , PCLK2_8};
 8000338:	2300      	movs	r3, #0
 800033a:	743b      	strb	r3, [r7, #16]
 800033c:	2300      	movs	r3, #0
 800033e:	747b      	strb	r3, [r7, #17]
 8000340:	2300      	movs	r3, #0
 8000342:	74bb      	strb	r3, [r7, #18]
 8000344:	2300      	movs	r3, #0
 8000346:	74fb      	strb	r3, [r7, #19]
 8000348:	2303      	movs	r3, #3
 800034a:	753b      	strb	r3, [r7, #20]
	ADC_vInit(&adcConfig);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff3f 	bl	80001d4 <ADC_vInit>
	//	USART_config uart_config = { USART1_NUM , ONE_BIT , DISABLE_PARITY , BIT8_WORD , OVERSAMPLING_16 , 9600 };
	//	USART_voidInit( &uart_config );
	//	USART_sendWord( USART1_NUM , ' ');

	/* Initialize Gsr error led */
	GPIO_PIN_CONFIG_T gpio_config_2 = { GSR_ERROR_LED_PORT , GSR_ERROR_LED_PIN , GPIO_OUTPUT , NO_PULL , PUSH_PULL_MODE , LOW_SPEED , 0 };
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <APP_Init+0xc0>)
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000360:	6018      	str	r0, [r3, #0]
 8000362:	3304      	adds	r3, #4
 8000364:	8019      	strh	r1, [r3, #0]
 8000366:	3302      	adds	r3, #2
 8000368:	0c0a      	lsrs	r2, r1, #16
 800036a:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_config_2 );
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f871 	bl	8001458 <GPIO_voidInti>

	/*WIFI error Led*/
	GPIO_PIN_CONFIG_T gpio_config_3 = { WIFI_ERROR_LED_PORT , WIFI_ERROR_LED_PIN , GPIO_OUTPUT , NO_PULL , PUSH_PULL_MODE , LOW_SPEED , 0 };
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <APP_Init+0xc4>)
 8000378:	463b      	mov	r3, r7
 800037a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037e:	6018      	str	r0, [r3, #0]
 8000380:	3304      	adds	r3, #4
 8000382:	8019      	strh	r1, [r3, #0]
 8000384:	3302      	adds	r3, #2
 8000386:	0c0a      	lsrs	r2, r1, #16
 8000388:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_config_3 );
 800038a:	463b      	mov	r3, r7
 800038c:	4618      	mov	r0, r3
 800038e:	f001 f863 	bl	8001458 <GPIO_voidInti>

	/* Systick */
	SYSTICK_voidInit();
 8000392:	f001 f931 	bl	80015f8 <SYSTICK_voidInit>

	/* Pass call back function to systick */
	SYSTICK_voidSetIntervalNumber( (2000000.0)/GSR_SAMPLING_RATE_HZ , INFINITY_TIMES , APP_voidSystickCallBackFun );
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <APP_Init+0xc8>)
 8000398:	f04f 31ff 	mov.w	r1, #4294967295
 800039c:	4806      	ldr	r0, [pc, #24]	; (80003b8 <APP_Init+0xcc>)
 800039e:	f001 f95b 	bl	8001658 <SYSTICK_voidSetIntervalNumber>

}
 80003a2:	bf00      	nop
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	08001944 	.word	0x08001944
 80003b0:	0800194c 	.word	0x0800194c
 80003b4:	08000285 	.word	0x08000285
 80003b8:	00030d40 	.word	0x00030d40

080003bc <APP_u8InitWifiConnection>:


/***** ESP32 Application functions *****/

STATUS_OF_CONNECTION_WITH_WIFI APP_u8InitWifiConnection(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

	u8 status = WELL_DONE , check = 0;
 80003c2:	2301      	movs	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	2300      	movs	r3, #0
 80003c8:	71bb      	strb	r3, [r7, #6]

	ESP01_voidInit();
 80003ca:	f000 fac9 	bl	8000960 <ESP01_voidInit>


	for( u8 i=0 ; i<3 ;i++ )
 80003ce:	2300      	movs	r3, #0
 80003d0:	717b      	strb	r3, [r7, #5]
 80003d2:	e009      	b.n	80003e8 <APP_u8InitWifiConnection+0x2c>
	{
		check = ESP01_u8CheckModuleConnection(); /* Check the module connection */
 80003d4:	f000 faf6 	bl	80009c4 <ESP01_u8CheckModuleConnection>
 80003d8:	4603      	mov	r3, r0
 80003da:	71bb      	strb	r3, [r7, #6]
		if( check == TRUE )
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d006      	beq.n	80003f0 <APP_u8InitWifiConnection+0x34>
	for( u8 i=0 ; i<3 ;i++ )
 80003e2:	797b      	ldrb	r3, [r7, #5]
 80003e4:	3301      	adds	r3, #1
 80003e6:	717b      	strb	r3, [r7, #5]
 80003e8:	797b      	ldrb	r3, [r7, #5]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d9f2      	bls.n	80003d4 <APP_u8InitWifiConnection+0x18>
 80003ee:	e000      	b.n	80003f2 <APP_u8InitWifiConnection+0x36>
			break;
 80003f0:	bf00      	nop
		//		for(u32 j=0 ; j<10000000 ; j++);  /* Some delay */
	}

	if( check != TRUE )
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d003      	beq.n	8000400 <APP_u8InitWifiConnection+0x44>
	{
		/* The WiFI module is not working */
		status = ESP_NOT_WORKING;
 80003f8:	2302      	movs	r3, #2
 80003fa:	71fb      	strb	r3, [r7, #7]
		return status;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	e01f      	b.n	8000440 <APP_u8InitWifiConnection+0x84>
	}

	check = ESP01_u8SendDisableEchoCommand(); /* Disable the echo */
 8000400:	f000 faf6 	bl	80009f0 <ESP01_u8SendDisableEchoCommand>
 8000404:	4603      	mov	r3, r0
 8000406:	71bb      	strb	r3, [r7, #6]
	if( check != TRUE )
 8000408:	79bb      	ldrb	r3, [r7, #6]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d001      	beq.n	8000412 <APP_u8InitWifiConnection+0x56>
	{
		status = ERROR_IN_DISABLE_ECHO;
 800040e:	2305      	movs	r3, #5
 8000410:	71fb      	strb	r3, [r7, #7]
	}


	check = ESP01_u8SetStationMode(); /* Put the ESP in station mode */
 8000412:	f000 faff 	bl	8000a14 <ESP01_u8SetStationMode>
 8000416:	4603      	mov	r3, r0
 8000418:	71bb      	strb	r3, [r7, #6]
	if(check != TRUE )
 800041a:	79bb      	ldrb	r3, [r7, #6]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d001      	beq.n	8000424 <APP_u8InitWifiConnection+0x68>
	{
		status = ERROR_IN_STATION_MODE;
 8000420:	2303      	movs	r3, #3
 8000422:	71fb      	strb	r3, [r7, #7]
	}

	check = ESP01_u8ConnectToWIFI( WIFI_USER_NAME , WIFI_USER_NAME_SIZE , WIFI_PASSWORD , WIFI_PASSWORD_SIZE );
 8000424:	2309      	movs	r3, #9
 8000426:	4a08      	ldr	r2, [pc, #32]	; (8000448 <APP_u8InitWifiConnection+0x8c>)
 8000428:	2104      	movs	r1, #4
 800042a:	4808      	ldr	r0, [pc, #32]	; (800044c <APP_u8InitWifiConnection+0x90>)
 800042c:	f000 fb04 	bl	8000a38 <ESP01_u8ConnectToWIFI>
 8000430:	4603      	mov	r3, r0
 8000432:	71bb      	strb	r3, [r7, #6]
	if( check != TRUE )
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d001      	beq.n	800043e <APP_u8InitWifiConnection+0x82>
	{
		status =ERROR_WITH_USERNAME_OR_PASSWORD;
 800043a:	2304      	movs	r3, #4
 800043c:	71fb      	strb	r3, [r7, #7]
	}

	return status;
 800043e:	79fb      	ldrb	r3, [r7, #7]

}
 8000440:	4618      	mov	r0, r3
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	08001954 	.word	0x08001954
 800044c:	08001960 	.word	0x08001960

08000450 <APP_sendString>:

/* This function takes a string and concatenate it with the server link, and send this link to server */
u8 APP_sendString( u8 * data , u16 size )
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000456:	af02      	add	r7, sp, #8
 8000458:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800045c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000460:	6018      	str	r0, [r3, #0]
 8000462:	460a      	mov	r2, r1
 8000464:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000468:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 800046c:	801a      	strh	r2, [r3, #0]
	u8 check ;
	check = ESP01_u8ConnectToServer( SERVER_IP , SERVER_IP_SIZE , "80", 2 , TCP );
 800046e:	2300      	movs	r3, #0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2302      	movs	r3, #2
 8000474:	4a3a      	ldr	r2, [pc, #232]	; (8000560 <APP_sendString+0x110>)
 8000476:	210d      	movs	r1, #13
 8000478:	483a      	ldr	r0, [pc, #232]	; (8000564 <APP_sendString+0x114>)
 800047a:	f000 fba3 	bl	8000bc4 <ESP01_u8ConnectToServer>
 800047e:	4603      	mov	r3, r0
 8000480:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

	if( check != TRUE )
 8000484:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8000488:	2b01      	cmp	r3, #1
 800048a:	d001      	beq.n	8000490 <APP_sendString+0x40>
	{
		return ERROR_WITH_CONNECTION_TO_SERVER;
 800048c:	2302      	movs	r3, #2
 800048e:	e061      	b.n	8000554 <APP_sendString+0x104>
	}

	u16 link_size=54;
 8000490:	2336      	movs	r3, #54	; 0x36
 8000492:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	u8 link[MAX_LINK_SIZE] = "http://localhost/Studemeter/action.php?type=data&data=";
 8000496:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800049a:	f5a3 7cfe 	sub.w	ip, r3, #508	; 0x1fc
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <APP_sendString+0x118>)
 80004a0:	461c      	mov	r4, r3
 80004a2:	4666      	mov	r6, ip
 80004a4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80004a8:	4635      	mov	r5, r6
 80004aa:	4623      	mov	r3, r4
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	6859      	ldr	r1, [r3, #4]
 80004b0:	689a      	ldr	r2, [r3, #8]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b6:	3410      	adds	r4, #16
 80004b8:	3610      	adds	r6, #16
 80004ba:	4574      	cmp	r4, lr
 80004bc:	d1f4      	bne.n	80004a8 <APP_sendString+0x58>
 80004be:	4633      	mov	r3, r6
 80004c0:	4622      	mov	r2, r4
 80004c2:	6810      	ldr	r0, [r2, #0]
 80004c4:	6018      	str	r0, [r3, #0]
 80004c6:	8891      	ldrh	r1, [r2, #4]
 80004c8:	7992      	ldrb	r2, [r2, #6]
 80004ca:	8099      	strh	r1, [r3, #4]
 80004cc:	719a      	strb	r2, [r3, #6]
 80004ce:	f10c 0337 	add.w	r3, ip, #55	; 0x37
 80004d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80004d6:	2100      	movs	r1, #0
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f9fa 	bl	80018d2 <memset>

	/* Concatenate the string with link */
	for( u16 i=0 ; i<size ; i++ , link_size++ )
 80004de:	2300      	movs	r3, #0
 80004e0:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
 80004e4:	e019      	b.n	800051a <APP_sendString+0xca>
		link[link_size] = data[i];
 80004e6:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80004ea:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80004ee:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	441a      	add	r2, r3
 80004f6:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 80004fa:	7811      	ldrb	r1, [r2, #0]
 80004fc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000500:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 8000504:	54d1      	strb	r1, [r2, r3]
	for( u16 i=0 ; i<size ; i++ , link_size++ )
 8000506:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800050a:	3301      	adds	r3, #1
 800050c:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
 8000510:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 8000514:	3301      	adds	r3, #1
 8000516:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 800051a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800051e:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8000522:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d3dc      	bcc.n	80004e6 <APP_sendString+0x96>

	u8 value[MAX_RECEIVED_DATA_SIZE] ;
	u16 data_size ;
	check = ESP01_u8SendDataOverConnection( link , link_size , GET , value , &data_size , WRITE );
 800052c:	f107 0210 	add.w	r2, r7, #16
 8000530:	f8b7 1216 	ldrh.w	r1, [r7, #534]	; 0x216
 8000534:	f107 001c 	add.w	r0, r7, #28
 8000538:	2301      	movs	r3, #1
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	f107 030e 	add.w	r3, r7, #14
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	4613      	mov	r3, r2
 8000544:	2200      	movs	r2, #0
 8000546:	f000 fc43 	bl	8000dd0 <ESP01_u8SendDataOverConnection>
 800054a:	4603      	mov	r3, r0
 800054c:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

	return check;
 8000550:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213


}
 8000554:	4618      	mov	r0, r3
 8000556:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800055a:	46bd      	mov	sp, r7
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	bf00      	nop
 8000560:	08001968 	.word	0x08001968
 8000564:	0800196c 	.word	0x0800196c
 8000568:	0800197c 	.word	0x0800197c

0800056c <APP_voidReverseString>:

/* This function reverse a string */
static void APP_voidReverseString(u8* str , u8 a_length)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	460b      	mov	r3, r1
 8000576:	70fb      	strb	r3, [r7, #3]

	u8 i;
	u8 temp;

	for (i = 0; i < a_length / 2; i++)
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e01c      	b.n	80005b8 <APP_voidReverseString+0x4c>
	{
		temp = str[i];
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	73bb      	strb	r3, [r7, #14]
		str[i] = str[a_length - 1 - i];
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	1e5a      	subs	r2, r3, #1
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	441a      	add	r2, r3
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	440b      	add	r3, r1
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	701a      	strb	r2, [r3, #0]
		str[a_length - 1 - i] = temp;
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	7bba      	ldrb	r2, [r7, #14]
 80005b0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < a_length / 2; i++)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3301      	adds	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	085b      	lsrs	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	7bfa      	ldrb	r2, [r7, #15]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3dc      	bcc.n	800057e <APP_voidReverseString+0x12>
	}

}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <APP_voidChangeQueueDataToString>:

/* This function changes the queue data to a string reading is separated by ; */
static void APP_voidChangeQueueDataToString( QUEUE_DATATYPE *a_queue_data , u16 a_queue_size , u8 *a_string_data , u16 *string_size )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	607a      	str	r2, [r7, #4]
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	460b      	mov	r3, r1
 80005e2:	817b      	strh	r3, [r7, #10]

	u8 temp_data[10];
	u8 single_number ;
	u16 counter = 0 , local_counter ;
 80005e4:	2300      	movs	r3, #0
 80005e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	u16 data;

	for(u8 i=0 ; i<a_queue_size ; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80005ee:	e062      	b.n	80006b6 <APP_voidChangeQueueDataToString+0xe2>
	{
		data = a_queue_data[i].GSR_reading ;
 80005f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	847b      	strh	r3, [r7, #34]	; 0x22
		local_counter = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	84bb      	strh	r3, [r7, #36]	; 0x24
		while( data != 0 )
 8000602:	e021      	b.n	8000648 <APP_voidChangeQueueDataToString+0x74>
		{
			single_number = data % 10;
 8000604:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000606:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <APP_voidChangeQueueDataToString+0x100>)
 8000608:	fba3 1302 	umull	r1, r3, r3, r2
 800060c:	08d9      	lsrs	r1, r3, #3
 800060e:	460b      	mov	r3, r1
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	b29b      	uxth	r3, r3
 800061a:	77fb      	strb	r3, [r7, #31]
			data = (u8) (data /10);
 800061c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800061e:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <APP_voidChangeQueueDataToString+0x100>)
 8000620:	fba2 2303 	umull	r2, r3, r2, r3
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	847b      	strh	r3, [r7, #34]	; 0x22
			temp_data[local_counter] = single_number + 48 ; /* change number into char */
 800062c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800062e:	7ffa      	ldrb	r2, [r7, #31]
 8000630:	3230      	adds	r2, #48	; 0x30
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	3328      	adds	r3, #40	; 0x28
 8000636:	443b      	add	r3, r7
 8000638:	f803 2c14 	strb.w	r2, [r3, #-20]
			counter++;
 800063c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800063e:	3301      	adds	r3, #1
 8000640:	84fb      	strh	r3, [r7, #38]	; 0x26
			local_counter++;
 8000642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000644:	3301      	adds	r3, #1
 8000646:	84bb      	strh	r3, [r7, #36]	; 0x24
		while( data != 0 )
 8000648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1da      	bne.n	8000604 <APP_voidChangeQueueDataToString+0x30>
		}

		/* Reverse the string */
		APP_voidReverseString(temp_data , local_counter );
 800064e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000650:	b2da      	uxtb	r2, r3
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff87 	bl	800056c <APP_voidReverseString>

		/* Save string to main string */
		for( s8 j=local_counter ; j>0 ; j-- )
 800065e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000660:	f887 3020 	strb.w	r3, [r7, #32]
 8000664:	e016      	b.n	8000694 <APP_voidChangeQueueDataToString+0xc0>
			a_string_data[counter-j] = temp_data[local_counter-j] ;
 8000666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000668:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800066c:	1ad2      	subs	r2, r2, r3
 800066e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000670:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000674:	1acb      	subs	r3, r1, r3
 8000676:	4619      	mov	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	440b      	add	r3, r1
 800067c:	3228      	adds	r2, #40	; 0x28
 800067e:	443a      	add	r2, r7
 8000680:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000684:	701a      	strb	r2, [r3, #0]
		for( s8 j=local_counter ; j>0 ; j-- )
 8000686:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	3b01      	subs	r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f887 3020 	strb.w	r3, [r7, #32]
 8000694:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8000698:	2b00      	cmp	r3, #0
 800069a:	dce4      	bgt.n	8000666 <APP_voidChangeQueueDataToString+0x92>

		a_string_data[counter] = ';';
 800069c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	223b      	movs	r2, #59	; 0x3b
 80006a4:	701a      	strb	r2, [r3, #0]
		counter++;
 80006a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006a8:	3301      	adds	r3, #1
 80006aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(u8 i=0 ; i<a_queue_size ; i++)
 80006ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80006b0:	3301      	adds	r3, #1
 80006b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80006b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	897a      	ldrh	r2, [r7, #10]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d896      	bhi.n	80005f0 <APP_voidChangeQueueDataToString+0x1c>
	}

	/* Pass the string size */
	*string_size = counter-1; /* Ignore last \n  */
 80006c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	801a      	strh	r2, [r3, #0]


}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	cccccccd 	.word	0xcccccccd

080006d8 <APP_voidSendDataBy_WiFi>:
//
//}

/* This function send data through WiFi  */
static void APP_voidSendDataBy_WiFi( QUEUE_DATATYPE *a_data , u16 a_size )
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b0f7      	sub	sp, #476	; 0x1dc
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80006e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80006e6:	6018      	str	r0, [r3, #0]
 80006e8:	460a      	mov	r2, r1
 80006ea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80006ee:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 80006f2:	801a      	strh	r2, [r3, #0]

	u8 string_data[ MAX_STRING_DATA_SIZE ];
	u16 string_size;

	/* Change the data in the queue to a string */
	APP_voidChangeQueueDataToString( a_data , a_size , string_data ,  &string_size  );
 80006f4:	f107 040a 	add.w	r4, r7, #10
 80006f8:	f107 020c 	add.w	r2, r7, #12
 80006fc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000700:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 8000704:	8819      	ldrh	r1, [r3, #0]
 8000706:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800070a:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 800070e:	4623      	mov	r3, r4
 8000710:	6800      	ldr	r0, [r0, #0]
 8000712:	f7ff ff5f 	bl	80005d4 <APP_voidChangeQueueDataToString>

	/* Send String to WiFi module */
	APP_sendString( string_data , string_size );
 8000716:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800071a:	f5a3 73e7 	sub.w	r3, r3, #462	; 0x1ce
 800071e:	881a      	ldrh	r2, [r3, #0]
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fe92 	bl	8000450 <APP_sendString>

}
 800072c:	bf00      	nop
 800072e:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}

08000736 <APP_voidSendData>:

/* This function in app layer that choose how to sent data */
void APP_voidSendData( QUEUE_DATATYPE *a_data , u16 a_size )
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	807b      	strh	r3, [r7, #2]
	APP_voidSendDataBy_WiFi(a_data,a_size);
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff ffc6 	bl	80006d8 <APP_voidSendDataBy_WiFi>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <ESP01_u8RecieveOKString>:

u8 g_counter;


static u8 ESP01_u8RecieveOKString()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
	u8 first_char=1;
 800075a:	2301      	movs	r3, #1
 800075c:	71fb      	strb	r3, [r7, #7]
	u8 second_char=1;
 800075e:	2301      	movs	r3, #1
 8000760:	71bb      	strb	r3, [r7, #6]
	USART_voidReceive( &second_char );
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fd0b 	bl	8001180 <USART_voidReceive>

	while(1)
	{
		first_char = second_char;  /* save the old received char in first_char */
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	71fb      	strb	r3, [r7, #7]
		USART_voidReceive( &second_char) ;
 800076e:	1dbb      	adds	r3, r7, #6
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fd05 	bl	8001180 <USART_voidReceive>

		if( 'K' == second_char && 'O' == first_char )
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	2b4b      	cmp	r3, #75	; 0x4b
 800077a:	d1f6      	bne.n	800076a <ESP01_u8RecieveOKString+0x16>
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b4f      	cmp	r3, #79	; 0x4f
 8000780:	d000      	beq.n	8000784 <ESP01_u8RecieveOKString+0x30>
		first_char = second_char;  /* save the old received char in first_char */
 8000782:	e7f2      	b.n	800076a <ESP01_u8RecieveOKString+0x16>
			break;
 8000784:	bf00      	nop

	}

	u8 back_slash_r , back_slash_n;
	USART_voidReceive( &back_slash_r );   /* \r */
 8000786:	1d7b      	adds	r3, r7, #5
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fcf9 	bl	8001180 <USART_voidReceive>
	USART_voidReceive( &back_slash_n ); /* \n */
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fcf5 	bl	8001180 <USART_voidReceive>

	if( first_char == 'O' && second_char == 'K' && back_slash_r == '\r' && back_slash_n == '\n' )
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b4f      	cmp	r3, #79	; 0x4f
 800079a:	d10a      	bne.n	80007b2 <ESP01_u8RecieveOKString+0x5e>
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	2b4b      	cmp	r3, #75	; 0x4b
 80007a0:	d107      	bne.n	80007b2 <ESP01_u8RecieveOKString+0x5e>
 80007a2:	797b      	ldrb	r3, [r7, #5]
 80007a4:	2b0d      	cmp	r3, #13
 80007a6:	d104      	bne.n	80007b2 <ESP01_u8RecieveOKString+0x5e>
 80007a8:	793b      	ldrb	r3, [r7, #4]
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d101      	bne.n	80007b2 <ESP01_u8RecieveOKString+0x5e>
		return 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e000      	b.n	80007b4 <ESP01_u8RecieveOKString+0x60>
	else
		return 0;
 80007b2:	2300      	movs	r3, #0

}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <ESP01_u8RecieveOKStringWithoutStack>:

static u8 ESP01_u8RecieveOKStringWithoutStack()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	u8 first_char=1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	71fb      	strb	r3, [r7, #7]
	u8 second_char=1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	717b      	strb	r3, [r7, #5]
	u8 check = 0 ;
 80007ca:	2300      	movs	r3, #0
 80007cc:	71bb      	strb	r3, [r7, #6]


	while( 1 )
	{
		if(check == 1) /* So the UART receive something */
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d101      	bne.n	80007d8 <ESP01_u8RecieveOKStringWithoutStack+0x1c>
			first_char = second_char;  /* save the old received char in first_char */
 80007d4:	797b      	ldrb	r3, [r7, #5]
 80007d6:	71fb      	strb	r3, [r7, #7]

		check = USART_voidReceiveWithouStackPolling( &second_char) ;
 80007d8:	1d7b      	adds	r3, r7, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fce8 	bl	80011b0 <USART_voidReceiveWithouStackPolling>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71bb      	strb	r3, [r7, #6]

		if( 'K' == second_char && 'O' == first_char )
 80007e4:	797b      	ldrb	r3, [r7, #5]
 80007e6:	2b4b      	cmp	r3, #75	; 0x4b
 80007e8:	d1f1      	bne.n	80007ce <ESP01_u8RecieveOKStringWithoutStack+0x12>
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b4f      	cmp	r3, #79	; 0x4f
 80007ee:	d000      	beq.n	80007f2 <ESP01_u8RecieveOKStringWithoutStack+0x36>
		if(check == 1) /* So the UART receive something */
 80007f0:	e7ed      	b.n	80007ce <ESP01_u8RecieveOKStringWithoutStack+0x12>
			break;
 80007f2:	bf00      	nop

	}


	u8 back_slash_r , back_slash_n;
	USART_voidReceive( &back_slash_r );   /* \r */
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fcc2 	bl	8001180 <USART_voidReceive>
	USART_voidReceive( &back_slash_n );  /* \n */
 80007fc:	1cfb      	adds	r3, r7, #3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fcbe 	bl	8001180 <USART_voidReceive>

	if( first_char == 'O' && second_char == 'K' && back_slash_r == '\r' && back_slash_n == '\n' )
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b4f      	cmp	r3, #79	; 0x4f
 8000808:	d10a      	bne.n	8000820 <ESP01_u8RecieveOKStringWithoutStack+0x64>
 800080a:	797b      	ldrb	r3, [r7, #5]
 800080c:	2b4b      	cmp	r3, #75	; 0x4b
 800080e:	d107      	bne.n	8000820 <ESP01_u8RecieveOKStringWithoutStack+0x64>
 8000810:	793b      	ldrb	r3, [r7, #4]
 8000812:	2b0d      	cmp	r3, #13
 8000814:	d104      	bne.n	8000820 <ESP01_u8RecieveOKStringWithoutStack+0x64>
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	2b0a      	cmp	r3, #10
 800081a:	d101      	bne.n	8000820 <ESP01_u8RecieveOKStringWithoutStack+0x64>
		return 1;
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <ESP01_u8RecieveOKStringWithoutStack+0x66>
	else
		return 0;
 8000820:	2300      	movs	r3, #0

}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <ESP01_recieveConnectedOrDisConnecteString>:

static u8 ESP01_recieveConnectedOrDisConnecteString()
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
	u8 second_char = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	717b      	strb	r3, [r7, #5]
	u8 first_char = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	71bb      	strb	r3, [r7, #6]
	u8 status = -1 ;
 8000838:	23ff      	movs	r3, #255	; 0xff
 800083a:	71fb      	strb	r3, [r7, #7]
	USART_voidReceive( &second_char );
 800083c:	1d7b      	adds	r3, r7, #5
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc9e 	bl	8001180 <USART_voidReceive>

	while(1) /* Loop till sent OK or FAIL */
	{
		first_char = second_char;  /* save the old received char in first_char */
 8000844:	797b      	ldrb	r3, [r7, #5]
 8000846:	71bb      	strb	r3, [r7, #6]
		USART_voidReceive(&second_char); /* Save the current received element in second_char */
 8000848:	1d7b      	adds	r3, r7, #5
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fc98 	bl	8001180 <USART_voidReceive>
		if( ('L' == second_char && 'I' == first_char) || ('K' == second_char && 'O' == first_char) || ('R' == second_char && 'O' == first_char)  )  /* To check if it response OK or FAIL or ERROR  */
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	2b4c      	cmp	r3, #76	; 0x4c
 8000854:	d102      	bne.n	800085c <ESP01_recieveConnectedOrDisConnecteString+0x32>
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	2b49      	cmp	r3, #73	; 0x49
 800085a:	d00c      	beq.n	8000876 <ESP01_recieveConnectedOrDisConnecteString+0x4c>
 800085c:	797b      	ldrb	r3, [r7, #5]
 800085e:	2b4b      	cmp	r3, #75	; 0x4b
 8000860:	d102      	bne.n	8000868 <ESP01_recieveConnectedOrDisConnecteString+0x3e>
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	2b4f      	cmp	r3, #79	; 0x4f
 8000866:	d006      	beq.n	8000876 <ESP01_recieveConnectedOrDisConnecteString+0x4c>
 8000868:	797b      	ldrb	r3, [r7, #5]
 800086a:	2b52      	cmp	r3, #82	; 0x52
 800086c:	d1ea      	bne.n	8000844 <ESP01_recieveConnectedOrDisConnecteString+0x1a>
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	2b4f      	cmp	r3, #79	; 0x4f
 8000872:	d000      	beq.n	8000876 <ESP01_recieveConnectedOrDisConnecteString+0x4c>
		first_char = second_char;  /* save the old received char in first_char */
 8000874:	e7e6      	b.n	8000844 <ESP01_recieveConnectedOrDisConnecteString+0x1a>
			break;
	}

	if( first_char == 'O' && second_char == 'K' ) /* OK */
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	2b4f      	cmp	r3, #79	; 0x4f
 800087a:	d105      	bne.n	8000888 <ESP01_recieveConnectedOrDisConnecteString+0x5e>
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	2b4b      	cmp	r3, #75	; 0x4b
 8000880:	d102      	bne.n	8000888 <ESP01_recieveConnectedOrDisConnecteString+0x5e>
	{
		status = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	e00d      	b.n	80008a4 <ESP01_recieveConnectedOrDisConnecteString+0x7a>
	}else if( first_char == 'O' && second_char == 'R' ) /* ERROR */
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	2b4f      	cmp	r3, #79	; 0x4f
 800088c:	d105      	bne.n	800089a <ESP01_recieveConnectedOrDisConnecteString+0x70>
 800088e:	797b      	ldrb	r3, [r7, #5]
 8000890:	2b52      	cmp	r3, #82	; 0x52
 8000892:	d102      	bne.n	800089a <ESP01_recieveConnectedOrDisConnecteString+0x70>
	{
		status = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	71fb      	strb	r3, [r7, #7]
 8000898:	e004      	b.n	80008a4 <ESP01_recieveConnectedOrDisConnecteString+0x7a>
	}
	else if( first_char == 'I' ) /* FAIL */
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b49      	cmp	r3, #73	; 0x49
 800089e:	d101      	bne.n	80008a4 <ESP01_recieveConnectedOrDisConnecteString+0x7a>
	{
		status = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
	}

	u8 back_slash_r , back_slash_n;
	USART_voidReceive( &back_slash_r );   /* \r */
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fc6a 	bl	8001180 <USART_voidReceive>
	USART_voidReceive( &back_slash_n );  /* \n */
 80008ac:	1cfb      	adds	r3, r7, #3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fc66 	bl	8001180 <USART_voidReceive>

	return status;
 80008b4:	79fb      	ldrb	r3, [r7, #7]

}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <ESP01_u8NumberToString>:
	return status;

}

static u8 ESP01_u8NumberToString( u16 number , u8 * str_num )
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	80fb      	strh	r3, [r7, #6]
	u8 counter = 0 , single_number;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

	while( number != 0 )
 80008d0:	e01d      	b.n	800090e <ESP01_u8NumberToString+0x4e>
	{
		single_number = number % 10;
 80008d2:	88fa      	ldrh	r2, [r7, #6]
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <ESP01_u8NumberToString+0x9c>)
 80008d6:	fba3 1302 	umull	r1, r3, r3, r2
 80008da:	08d9      	lsrs	r1, r3, #3
 80008dc:	460b      	mov	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	737b      	strb	r3, [r7, #13]
		number = (u8) (number /10);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <ESP01_u8NumberToString+0x9c>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	08db      	lsrs	r3, r3, #3
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	80fb      	strh	r3, [r7, #6]
		str_num[counter] = single_number + 48 ; /* change number into char */
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	7b7a      	ldrb	r2, [r7, #13]
 8000902:	3230      	adds	r2, #48	; 0x30
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	701a      	strb	r2, [r3, #0]
		counter++;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	3301      	adds	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
	while( number != 0 )
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1de      	bne.n	80008d2 <ESP01_u8NumberToString+0x12>
	}

	u8 temp;
	if( counter == 3 )
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d10b      	bne.n	8000932 <ESP01_u8NumberToString+0x72>
	{
		temp = str_num[0];
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	73bb      	strb	r3, [r7, #14]
		str_num[0] = str_num[2];
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	789a      	ldrb	r2, [r3, #2]
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	701a      	strb	r2, [r3, #0]
		str_num[2] = temp;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	3302      	adds	r3, #2
 800092c:	7bba      	ldrb	r2, [r7, #14]
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e00d      	b.n	800094e <ESP01_u8NumberToString+0x8e>
	}else if( counter == 2 )
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d10a      	bne.n	800094e <ESP01_u8NumberToString+0x8e>
	{
		temp = str_num[0];
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	73bb      	strb	r3, [r7, #14]
		str_num[0] = str_num[1];
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	785a      	ldrb	r2, [r3, #1]
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	701a      	strb	r2, [r3, #0]
		str_num[1] = temp;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	7bba      	ldrb	r2, [r7, #14]
 800094c:	701a      	strb	r2, [r3, #0]
	}

	return counter;
 800094e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	cccccccd 	.word	0xcccccccd

08000960 <ESP01_voidInit>:
	g_counter++;
}


void ESP01_voidInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0

	RCC_voidEnablePerpheralClk( APB2 ,  USART1_ID );
 8000966:	2104      	movs	r1, #4
 8000968:	2003      	movs	r0, #3
 800096a:	f000 fdef 	bl	800154c <RCC_voidEnablePerpheralClk>
	RCC_voidEnablePerpheralClk(AHB1 , GPIOA_ID);
 800096e:	2100      	movs	r1, #0
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fdeb 	bl	800154c <RCC_voidEnablePerpheralClk>

	/* Configare GPIO pins */
	GPIO_PIN_CONFIG_T gpio_cofig = { PORTA_ID , PIN9_ID , GPIO_ALTERNATIVE_FUNCTION , NO_PULL , NONE , NONE , AF7 };
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <ESP01_voidInit+0x60>)
 8000978:	463b      	mov	r3, r7
 800097a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097e:	6018      	str	r0, [r3, #0]
 8000980:	3304      	adds	r3, #4
 8000982:	8019      	strh	r1, [r3, #0]
 8000984:	3302      	adds	r3, #2
 8000986:	0c0a      	lsrs	r2, r1, #16
 8000988:	701a      	strb	r2, [r3, #0]
	GPIO_voidInti( &gpio_cofig ); /* For TX pin (PIN 9) */
 800098a:	463b      	mov	r3, r7
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fd63 	bl	8001458 <GPIO_voidInti>
	gpio_cofig.pin_id = PIN10_ID;
 8000992:	230a      	movs	r3, #10
 8000994:	707b      	strb	r3, [r7, #1]
	GPIO_voidInti( &gpio_cofig ); /* For RX pin (PIN 10) */
 8000996:	463b      	mov	r3, r7
 8000998:	4618      	mov	r0, r3
 800099a:	f000 fd5d 	bl	8001458 <GPIO_voidInti>


	GPIO_voidPinMode( PORTA_ID , PIN9_ID , GPIO_ALTERNATIVE_FUNCTION );
 800099e:	2202      	movs	r2, #2
 80009a0:	2109      	movs	r1, #9
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fc60 	bl	8001268 <GPIO_voidPinMode>
	GPIO_voidPinMode( PORTA_ID , PIN10_ID , GPIO_ALTERNATIVE_FUNCTION );
 80009a8:	2202      	movs	r2, #2
 80009aa:	210a      	movs	r1, #10
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fc5b 	bl	8001268 <GPIO_voidPinMode>

	USART_voidInit();
 80009b2:	f000 fb95 	bl	80010e0 <USART_voidInit>


}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	080019b4 	.word	0x080019b4

080009c4 <ESP01_u8CheckModuleConnection>:


u8 ESP01_u8CheckModuleConnection(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	u8 check;


	USART_voidSend( AT_TEST_COMMAND ); /* Send AT command */
 80009ca:	2104      	movs	r1, #4
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <ESP01_u8CheckModuleConnection+0x28>)
 80009ce:	f000 fba5 	bl	800111c <USART_voidSend>
	USART_voidSend( AT_TEST_COMMAND ); /* Send AT command */
 80009d2:	2104      	movs	r1, #4
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <ESP01_u8CheckModuleConnection+0x28>)
 80009d6:	f000 fba1 	bl	800111c <USART_voidSend>

	check = ESP01_u8RecieveOKStringWithoutStack();  /* check = 0 : The WiFi module is not connected, check = 1 : WiFi module is connected  */
 80009da:	f7ff feef 	bl	80007bc <ESP01_u8RecieveOKStringWithoutStack>
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]

	return check;
 80009e2:	79fb      	ldrb	r3, [r7, #7]

}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	080019bc 	.word	0x080019bc

080009f0 <ESP01_u8SendDisableEchoCommand>:
	return status;

}

u8 ESP01_u8SendDisableEchoCommand(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	USART_voidSend( AT_DISABLE_ECHO ); /* Send command */
 80009f6:	2106      	movs	r1, #6
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <ESP01_u8SendDisableEchoCommand+0x20>)
 80009fa:	f000 fb8f 	bl	800111c <USART_voidSend>
	u8 status = ESP01_u8RecieveOKString();  /* receive response */
 80009fe:	f7ff fea9 	bl	8000754 <ESP01_u8RecieveOKString>
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]

	return status;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080019c4 	.word	0x080019c4

08000a14 <ESP01_u8SetStationMode>:

	return status;
}

u8 ESP01_u8SetStationMode(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	USART_voidSend( AT_SATION_MODE ); /* Send command */
 8000a1a:	210d      	movs	r1, #13
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <ESP01_u8SetStationMode+0x20>)
 8000a1e:	f000 fb7d 	bl	800111c <USART_voidSend>
	u8 status = ESP01_u8RecieveOKString();  /* receive response */
 8000a22:	f7ff fe97 	bl	8000754 <ESP01_u8RecieveOKString>
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]


	return status;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	080019e8 	.word	0x080019e8

08000a38 <ESP01_u8ConnectToWIFI>:
/*****************************************************************************
 * This function takes the user name and password of your WIFI, then returns *
 * if it connected or not                                                    *
 *****************************************************************************/
u8 ESP01_u8ConnectToWIFI( u8* a_ptr_user_name , u8 a_size_user_name , u8* a_ptr_password , u8 a_size_password )
{
 8000a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a3c:	b08d      	sub	sp, #52	; 0x34
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	461a      	mov	r2, r3
 8000a46:	460b      	mov	r3, r1
 8000a48:	72fb      	strb	r3, [r7, #11]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	72bb      	strb	r3, [r7, #10]
 8000a4e:	466b      	mov	r3, sp
 8000a50:	461e      	mov	r6, r3
	u8 status;

	u8 start_command[9] = "AT+CWJAP=";  /* The first part of the command */
 8000a52:	4a5b      	ldr	r2, [pc, #364]	; (8000bc0 <ESP01_u8ConnectToWIFI+0x188>)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5a:	c303      	stmia	r3!, {r0, r1}
 8000a5c:	701a      	strb	r2, [r3, #0]
	u16 command_array_size = a_size_password + a_size_user_name + 16 ; /* 16 = 9(AT+CWJAP=) + 2(" ") + 2(" ") + 1(,) + 1(\n) + 1(\r) */
 8000a5e:	7abb      	ldrb	r3, [r7, #10]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	7afb      	ldrb	r3, [r7, #11]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	4413      	add	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3310      	adds	r3, #16
 8000a6c:	857b      	strh	r3, [r7, #42]	; 0x2a
	u8 command[command_array_size]; /* Array contains all my command */
 8000a6e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000a70:	460b      	mov	r3, r1
 8000a72:	3b01      	subs	r3, #1
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
 8000a76:	b28b      	uxth	r3, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4698      	mov	r8, r3
 8000a7c:	4691      	mov	r9, r2
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a92:	b28b      	uxth	r3, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	461c      	mov	r4, r3
 8000a98:	4615      	mov	r5, r2
 8000a9a:	f04f 0200 	mov.w	r2, #0
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	00eb      	lsls	r3, r5, #3
 8000aa4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000aa8:	00e2      	lsls	r2, r4, #3
 8000aaa:	460b      	mov	r3, r1
 8000aac:	3307      	adds	r3, #7
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab6:	466b      	mov	r3, sp
 8000ab8:	3300      	adds	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]

	u16 i; /* Counter to my command array */

	for( i=0 ; i<9 ; i++ ) /* First put the First part of command in command array */
 8000abc:	2300      	movs	r3, #0
 8000abe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ac0:	e00a      	b.n	8000ad8 <ESP01_u8ConnectToWIFI+0xa0>
		command[i] = start_command[i];
 8000ac2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000ac4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ac6:	3230      	adds	r2, #48	; 0x30
 8000ac8:	443a      	add	r2, r7
 8000aca:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8000ace:	6a3a      	ldr	r2, [r7, #32]
 8000ad0:	54d1      	strb	r1, [r2, r3]
	for( i=0 ; i<9 ; i++ ) /* First put the First part of command in command array */
 8000ad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d9f1      	bls.n	8000ac2 <ESP01_u8ConnectToWIFI+0x8a>

	command[i] = '"'; /* add " for user name */
 8000ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ae0:	6a3a      	ldr	r2, [r7, #32]
 8000ae2:	2122      	movs	r1, #34	; 0x22
 8000ae4:	54d1      	strb	r1, [r2, r3]
	i++;
 8000ae6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ae8:	3301      	adds	r3, #1
 8000aea:	85fb      	strh	r3, [r7, #46]	; 0x2e

	for( u8 j=0 ; j<a_size_user_name ; j++ ,i++ ) /* Add user name */
 8000aec:	2300      	movs	r3, #0
 8000aee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000af2:	e00f      	b.n	8000b14 <ESP01_u8ConnectToWIFI+0xdc>
	{
		command[i] = a_ptr_user_name[j];
 8000af4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	441a      	add	r2, r3
 8000afc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000afe:	7811      	ldrb	r1, [r2, #0]
 8000b00:	6a3a      	ldr	r2, [r7, #32]
 8000b02:	54d1      	strb	r1, [r2, r3]
	for( u8 j=0 ; j<a_size_user_name ; j++ ,i++ ) /* Add user name */
 8000b04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b08:	3301      	adds	r3, #1
 8000b0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000b0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b10:	3301      	adds	r3, #1
 8000b12:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000b14:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b18:	7afb      	ldrb	r3, [r7, #11]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d3ea      	bcc.n	8000af4 <ESP01_u8ConnectToWIFI+0xbc>
	}

	command[i] = '"'; /* add " for end of user name */
 8000b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b20:	6a3a      	ldr	r2, [r7, #32]
 8000b22:	2122      	movs	r1, #34	; 0x22
 8000b24:	54d1      	strb	r1, [r2, r3]
	i++;
 8000b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b28:	3301      	adds	r3, #1
 8000b2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	command[i] = ','; /* add , */
 8000b2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b2e:	6a3a      	ldr	r2, [r7, #32]
 8000b30:	212c      	movs	r1, #44	; 0x2c
 8000b32:	54d1      	strb	r1, [r2, r3]
	i++;
 8000b34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b36:	3301      	adds	r3, #1
 8000b38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	command[i] = '"'; /* add " for password */
 8000b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b3c:	6a3a      	ldr	r2, [r7, #32]
 8000b3e:	2122      	movs	r1, #34	; 0x22
 8000b40:	54d1      	strb	r1, [r2, r3]
	i++;
 8000b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b44:	3301      	adds	r3, #1
 8000b46:	85fb      	strh	r3, [r7, #46]	; 0x2e

	for(u8 j=0 ; j<a_size_password ; j++,i++) /* Add password */
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000b4e:	e00f      	b.n	8000b70 <ESP01_u8ConnectToWIFI+0x138>
	{
		command[i] = a_ptr_password[j];
 8000b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	441a      	add	r2, r3
 8000b58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b5a:	7811      	ldrb	r1, [r2, #0]
 8000b5c:	6a3a      	ldr	r2, [r7, #32]
 8000b5e:	54d1      	strb	r1, [r2, r3]
	for(u8 j=0 ; j<a_size_password ; j++,i++) /* Add password */
 8000b60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b64:	3301      	adds	r3, #1
 8000b66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000b70:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000b74:	7abb      	ldrb	r3, [r7, #10]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d3ea      	bcc.n	8000b50 <ESP01_u8ConnectToWIFI+0x118>
	}

	command[i] = '"'; /* add " for end of password */
 8000b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b7c:	6a3a      	ldr	r2, [r7, #32]
 8000b7e:	2122      	movs	r1, #34	; 0x22
 8000b80:	54d1      	strb	r1, [r2, r3]
	i++;
 8000b82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b84:	3301      	adds	r3, #1
 8000b86:	85fb      	strh	r3, [r7, #46]	; 0x2e
	command[i] = '\r'; /* add \r */
 8000b88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b8a:	6a3a      	ldr	r2, [r7, #32]
 8000b8c:	210d      	movs	r1, #13
 8000b8e:	54d1      	strb	r1, [r2, r3]
	i++;
 8000b90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b92:	3301      	adds	r3, #1
 8000b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	command[i] = '\n'; /* add \n */
 8000b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b98:	6a3a      	ldr	r2, [r7, #32]
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	54d1      	strb	r1, [r2, r3]

	USART_voidSend( command ,command_array_size ); /* Send the command array by UART */
 8000b9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	6a38      	ldr	r0, [r7, #32]
 8000ba4:	f000 faba 	bl	800111c <USART_voidSend>

	status = ESP01_recieveConnectedOrDisConnecteString(); /* This function receive the ESP01 response and return if WIFI is connected or not */
 8000ba8:	f7ff fe3f 	bl	800082a <ESP01_recieveConnectedOrDisConnecteString>
 8000bac:	4603      	mov	r3, r0
 8000bae:	77fb      	strb	r3, [r7, #31]

	return status;
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	46b5      	mov	sp, r6

}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3734      	adds	r7, #52	; 0x34
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08001a08 	.word	0x08001a08

08000bc4 <ESP01_u8ConnectToServer>:


u8 ESP01_u8ConnectToServer( u8 *server_ip , u8 size_server_ip , u8 * port_num , u8 size_port_num , CONNECTION_TYPE connection_type )
{
 8000bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bc8:	b08d      	sub	sp, #52	; 0x34
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	72fb      	strb	r3, [r7, #11]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	72bb      	strb	r3, [r7, #10]
 8000bda:	466b      	mov	r3, sp
 8000bdc:	461e      	mov	r6, r3
	u8 status = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	u8 start_command[12] = "AT+CIPSTART=";  /* The first part of the command */
 8000be4:	4a79      	ldr	r2, [pc, #484]	; (8000dcc <ESP01_u8ConnectToServer+0x208>)
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	u16 command_array_size = size_server_ip + size_port_num + 23 ; /* 23 = 12(AT+CIPSTART=) + 3(TCP or UDP) + 2(" ") + 2(" ")  + 1(,) + 1(,) + 1(\n) + 1(\r) */
 8000bf0:	7afb      	ldrb	r3, [r7, #11]
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	7abb      	ldrb	r3, [r7, #10]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	3317      	adds	r3, #23
 8000bfe:	853b      	strh	r3, [r7, #40]	; 0x28
	u8 command[command_array_size]; /* Array contains all my command */
 8000c00:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000c02:	460b      	mov	r3, r1
 8000c04:	3b01      	subs	r3, #1
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
 8000c08:	b28b      	uxth	r3, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4698      	mov	r8, r3
 8000c0e:	4691      	mov	r9, r2
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c24:	b28b      	uxth	r3, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	461c      	mov	r4, r3
 8000c2a:	4615      	mov	r5, r2
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	00eb      	lsls	r3, r5, #3
 8000c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c3a:	00e2      	lsls	r2, r4, #3
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	3307      	adds	r3, #7
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	ebad 0d03 	sub.w	sp, sp, r3
 8000c48:	466b      	mov	r3, sp
 8000c4a:	3300      	adds	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]

	u8 type_connection[3];
	if( connection_type == TCP )
 8000c4e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d106      	bne.n	8000c64 <ESP01_u8ConnectToServer+0xa0>
	{
		type_connection[0] = 'T' ;
 8000c56:	2354      	movs	r3, #84	; 0x54
 8000c58:	743b      	strb	r3, [r7, #16]
		type_connection[1] = 'C' ;
 8000c5a:	2343      	movs	r3, #67	; 0x43
 8000c5c:	747b      	strb	r3, [r7, #17]
		type_connection[2] = 'P' ;
 8000c5e:	2350      	movs	r3, #80	; 0x50
 8000c60:	74bb      	strb	r3, [r7, #18]
 8000c62:	e010      	b.n	8000c86 <ESP01_u8ConnectToServer+0xc2>
	}else if( connection_type == UDP )
 8000c64:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d106      	bne.n	8000c7a <ESP01_u8ConnectToServer+0xb6>
	{
		type_connection[0] = 'U' ;
 8000c6c:	2355      	movs	r3, #85	; 0x55
 8000c6e:	743b      	strb	r3, [r7, #16]
		type_connection[1] = 'D' ;
 8000c70:	2344      	movs	r3, #68	; 0x44
 8000c72:	747b      	strb	r3, [r7, #17]
		type_connection[2] = 'P' ;
 8000c74:	2350      	movs	r3, #80	; 0x50
 8000c76:	74bb      	strb	r3, [r7, #18]
 8000c78:	e005      	b.n	8000c86 <ESP01_u8ConnectToServer+0xc2>
	}else
	{
		status = 3;  /* wrong connection type argument */
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		return status;
 8000c80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000c84:	e09c      	b.n	8000dc0 <ESP01_u8ConnectToServer+0x1fc>
	}

	u16 i; /* Counter to my command array */

	for( i=0 ; i<12 ; i++ ) /* First put the First part of command in command array */
 8000c86:	2300      	movs	r3, #0
 8000c88:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000c8a:	e00a      	b.n	8000ca2 <ESP01_u8ConnectToServer+0xde>
		command[i] = start_command[i];
 8000c8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c90:	3230      	adds	r2, #48	; 0x30
 8000c92:	443a      	add	r2, r7
 8000c94:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8000c98:	6a3a      	ldr	r2, [r7, #32]
 8000c9a:	54d1      	strb	r1, [r2, r3]
	for( i=0 ; i<12 ; i++ ) /* First put the First part of command in command array */
 8000c9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ca2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ca4:	2b0b      	cmp	r3, #11
 8000ca6:	d9f1      	bls.n	8000c8c <ESP01_u8ConnectToServer+0xc8>

	command[i] = '"'; /* add " for start of Connection type */
 8000ca8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000caa:	6a3a      	ldr	r2, [r7, #32]
 8000cac:	2122      	movs	r1, #34	; 0x22
 8000cae:	54d1      	strb	r1, [r2, r3]
	i++;
 8000cb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	for( u8 j=0 ; j<3 ; j++ ,i++ )
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000cbc:	e010      	b.n	8000ce0 <ESP01_u8ConnectToServer+0x11c>
		command[i] = type_connection[j];
 8000cbe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000cc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cc4:	3230      	adds	r2, #48	; 0x30
 8000cc6:	443a      	add	r2, r7
 8000cc8:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8000ccc:	6a3a      	ldr	r2, [r7, #32]
 8000cce:	54d1      	strb	r1, [r2, r3]
	for( u8 j=0 ; j<3 ; j++ ,i++ )
 8000cd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000cda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cdc:	3301      	adds	r3, #1
 8000cde:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ce0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d9ea      	bls.n	8000cbe <ESP01_u8ConnectToServer+0xfa>

	command[i] = '"'; /* add " for end of Connection type */
 8000ce8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cea:	6a3a      	ldr	r2, [r7, #32]
 8000cec:	2122      	movs	r1, #34	; 0x22
 8000cee:	54d1      	strb	r1, [r2, r3]
	i++;
 8000cf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	command[i] = ','; /* add , */
 8000cf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000cf8:	6a3a      	ldr	r2, [r7, #32]
 8000cfa:	212c      	movs	r1, #44	; 0x2c
 8000cfc:	54d1      	strb	r1, [r2, r3]
	i++;
 8000cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d00:	3301      	adds	r3, #1
 8000d02:	85fb      	strh	r3, [r7, #46]	; 0x2e

	command[i] = '"'; /* add " for start of server ip */
 8000d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d06:	6a3a      	ldr	r2, [r7, #32]
 8000d08:	2122      	movs	r1, #34	; 0x22
 8000d0a:	54d1      	strb	r1, [r2, r3]
	i++;
 8000d0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d0e:	3301      	adds	r3, #1
 8000d10:	85fb      	strh	r3, [r7, #46]	; 0x2e

	for( u8 j=0 ; j<size_server_ip ; j++ ,i++ )
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000d18:	e00f      	b.n	8000d3a <ESP01_u8ConnectToServer+0x176>
		command[i] = server_ip[j];
 8000d1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	441a      	add	r2, r3
 8000d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d24:	7811      	ldrb	r1, [r2, #0]
 8000d26:	6a3a      	ldr	r2, [r7, #32]
 8000d28:	54d1      	strb	r1, [r2, r3]
	for( u8 j=0 ; j<size_server_ip ; j++ ,i++ )
 8000d2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000d34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d36:	3301      	adds	r3, #1
 8000d38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000d3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d3ea      	bcc.n	8000d1a <ESP01_u8ConnectToServer+0x156>

	command[i] = '"'; /* add " for end of server ip */
 8000d44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d46:	6a3a      	ldr	r2, [r7, #32]
 8000d48:	2122      	movs	r1, #34	; 0x22
 8000d4a:	54d1      	strb	r1, [r2, r3]
	i++;
 8000d4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d4e:	3301      	adds	r3, #1
 8000d50:	85fb      	strh	r3, [r7, #46]	; 0x2e

	command[i] = ','; /* add , */
 8000d52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d54:	6a3a      	ldr	r2, [r7, #32]
 8000d56:	212c      	movs	r1, #44	; 0x2c
 8000d58:	54d1      	strb	r1, [r2, r3]
	i++;
 8000d5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	for( u8 j=0 ; j<size_port_num ; j++ , i++ )
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000d66:	e00f      	b.n	8000d88 <ESP01_u8ConnectToServer+0x1c4>
		command[i] = port_num[j];
 8000d68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	441a      	add	r2, r3
 8000d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d72:	7811      	ldrb	r1, [r2, #0]
 8000d74:	6a3a      	ldr	r2, [r7, #32]
 8000d76:	54d1      	strb	r1, [r2, r3]
	for( u8 j=0 ; j<size_port_num ; j++ , i++ )
 8000d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000d82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d84:	3301      	adds	r3, #1
 8000d86:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000d88:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000d8c:	7abb      	ldrb	r3, [r7, #10]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d3ea      	bcc.n	8000d68 <ESP01_u8ConnectToServer+0x1a4>

	command[i] = '\r'; /* add \r */
 8000d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d94:	6a3a      	ldr	r2, [r7, #32]
 8000d96:	210d      	movs	r1, #13
 8000d98:	54d1      	strb	r1, [r2, r3]
	i++;
 8000d9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	command[i] = '\n'; /* add \n */
 8000da0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000da2:	6a3a      	ldr	r2, [r7, #32]
 8000da4:	210a      	movs	r1, #10
 8000da6:	54d1      	strb	r1, [r2, r3]

	USART_voidSend( command ,command_array_size ); /* Send the command array by UART */
 8000da8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000daa:	4619      	mov	r1, r3
 8000dac:	6a38      	ldr	r0, [r7, #32]
 8000dae:	f000 f9b5 	bl	800111c <USART_voidSend>

	status = ESP01_recieveConnectedOrDisConnecteString(); /* This function receive the ESP01 response and return if WIFI is connected or not */
 8000db2:	f7ff fd3a 	bl	800082a <ESP01_recieveConnectedOrDisConnecteString>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	return status;
 8000dbc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dc0:	46b5      	mov	sp, r6

}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3734      	adds	r7, #52	; 0x34
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dcc:	08001a14 	.word	0x08001a14

08000dd0 <ESP01_u8SendDataOverConnection>:


u8 ESP01_u8SendDataOverConnection( u8 * link , u16 size_link , SENDING_METHOD method , u8 *a_data , u16 *a_size_data , READ_OR_WRITE_FROM_SEVER read_or_write  )
{
 8000dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd4:	b097      	sub	sp, #92	; 0x5c
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6178      	str	r0, [r7, #20]
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	827b      	strh	r3, [r7, #18]
 8000de0:	4613      	mov	r3, r2
 8000de2:	747b      	strb	r3, [r7, #17]
 8000de4:	466b      	mov	r3, sp
 8000de6:	461e      	mov	r6, r3
	u8 status = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	u8  sending_method[4];
	u8 sending_method_size;

	if( method == GET )
 8000dee:	7c7b      	ldrb	r3, [r7, #17]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10c      	bne.n	8000e0e <ESP01_u8SendDataOverConnection+0x3e>
	{
		sending_method[0] = 'G' ;
 8000df4:	2347      	movs	r3, #71	; 0x47
 8000df6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		sending_method[1] = 'E' ;
 8000dfa:	2345      	movs	r3, #69	; 0x45
 8000dfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		sending_method[2] = 'T' ;
 8000e00:	2354      	movs	r3, #84	; 0x54
 8000e02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		sending_method_size = 3;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000e0c:	e018      	b.n	8000e40 <ESP01_u8SendDataOverConnection+0x70>
	}else if( method == POST )
 8000e0e:	7c7b      	ldrb	r3, [r7, #17]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10f      	bne.n	8000e34 <ESP01_u8SendDataOverConnection+0x64>
	{
		sending_method[0] = 'P' ;
 8000e14:	2350      	movs	r3, #80	; 0x50
 8000e16:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		sending_method[1] = 'O' ;
 8000e1a:	234f      	movs	r3, #79	; 0x4f
 8000e1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		sending_method[2] = 'S' ;
 8000e20:	2353      	movs	r3, #83	; 0x53
 8000e22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		sending_method[3] = 'T' ;
 8000e26:	2354      	movs	r3, #84	; 0x54
 8000e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		sending_method_size = 4;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000e32:	e005      	b.n	8000e40 <ESP01_u8SendDataOverConnection+0x70>
	}else
	{
		status =3;
 8000e34:	2303      	movs	r3, #3
 8000e36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		return status;
 8000e3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e3e:	e147      	b.n	80010d0 <ESP01_u8SendDataOverConnection+0x300>
	}

	u8 size ;
	u16 size_total_link = size_link + sending_method_size + 3 ; /* 3 = 1(' ') + 1(\r) + 1(\n) */
 8000e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	8a7b      	ldrh	r3, [r7, #18]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	u8 arr_size[3]; /* Max is 3 */
	size = ESP01_u8NumberToString( size_total_link , arr_size);
 8000e52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd2f 	bl	80008c0 <ESP01_u8NumberToString>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	u8 start_command[11] = "AT+CIPSEND=";  /* The first part of the command */
 8000e68:	4a9c      	ldr	r2, [pc, #624]	; (80010dc <ESP01_u8SendDataOverConnection+0x30c>)
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e70:	c303      	stmia	r3!, {r0, r1}
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	0c12      	lsrs	r2, r2, #16
 8000e78:	701a      	strb	r2, [r3, #0]
	u16 command_array_size = size + 13 ; /*  11(AT+CIPSEND=) + size + 1(\n) + 1(\r)  */
 8000e7a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	330d      	adds	r3, #13
 8000e82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	u8 command[command_array_size]; /* Array contains all my command */
 8000e86:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8000e90:	b28b      	uxth	r3, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	00c3      	lsls	r3, r0, #3
 8000ea4:	6838      	ldr	r0, [r7, #0]
 8000ea6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	00c2      	lsls	r2, r0, #3
 8000eae:	b28b      	uxth	r3, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	4693      	mov	fp, r2
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000ec2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000ec6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	3307      	adds	r3, #7
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ed6:	466b      	mov	r3, sp
 8000ed8:	3300      	adds	r3, #0
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c


	u16 i; /* Counter to my command array */

	for( i=0 ; i<11 ; i++ ) /* First put the First part of command in command array */
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000ee2:	e010      	b.n	8000f06 <ESP01_u8SendDataOverConnection+0x136>
		command[i] = start_command[i];
 8000ee4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000ee8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000eec:	3250      	adds	r2, #80	; 0x50
 8000eee:	f107 0108 	add.w	r1, r7, #8
 8000ef2:	440a      	add	r2, r1
 8000ef4:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 8000ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000efa:	54d1      	strb	r1, [r2, r3]
	for( i=0 ; i<11 ; i++ ) /* First put the First part of command in command array */
 8000efc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f00:	3301      	adds	r3, #1
 8000f02:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000f06:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f0a:	2b0a      	cmp	r3, #10
 8000f0c:	d9ea      	bls.n	8000ee4 <ESP01_u8SendDataOverConnection+0x114>


	for( u8 j=0 ; j<size ; j++ , i++ )
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000f14:	e015      	b.n	8000f42 <ESP01_u8SendDataOverConnection+0x172>
		command[i] = arr_size[j];
 8000f16:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8000f1a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f1e:	3250      	adds	r2, #80	; 0x50
 8000f20:	f107 0108 	add.w	r1, r7, #8
 8000f24:	440a      	add	r2, r1
 8000f26:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8000f2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f2c:	54d1      	strb	r1, [r2, r3]
	for( u8 j=0 ; j<size ; j++ , i++ )
 8000f2e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000f32:	3301      	adds	r3, #1
 8000f34:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8000f38:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000f42:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8000f46:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3e3      	bcc.n	8000f16 <ESP01_u8SendDataOverConnection+0x146>

	command[i] = '\r'; /* add \r */
 8000f4e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f54:	210d      	movs	r1, #13
 8000f56:	54d1      	strb	r1, [r2, r3]
	i++;
 8000f58:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	command[i] = '\n'; /* add \n */
 8000f62:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f68:	210a      	movs	r1, #10
 8000f6a:	54d1      	strb	r1, [r2, r3]
	i++;
 8000f6c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000f70:	3301      	adds	r3, #1
 8000f72:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	u8 greater_than_symbol , backslash_r , backslash_n;
	USART_voidSend( command ,command_array_size ); /* Send the command array by UART */
 8000f76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f7e:	f000 f8cd 	bl	800111c <USART_voidSend>
	u8 check = ESP01_recieveConnectedOrDisConnecteString();
 8000f82:	f7ff fc52 	bl	800082a <ESP01_recieveConnectedOrDisConnecteString>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	USART_voidReceive(&backslash_r);
 8000f8c:	f107 031a 	add.w	r3, r7, #26
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f8f5 	bl	8001180 <USART_voidReceive>
	USART_voidReceive(&backslash_n);
 8000f96:	f107 0319 	add.w	r3, r7, #25
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8f0 	bl	8001180 <USART_voidReceive>
	USART_voidReceive(&greater_than_symbol);
 8000fa0:	f107 031b 	add.w	r3, r7, #27
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f8eb 	bl	8001180 <USART_voidReceive>

	if( check == 1 && greater_than_symbol == '>' )
 8000faa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d102      	bne.n	8000fb8 <ESP01_u8SendDataOverConnection+0x1e8>
 8000fb2:	7efb      	ldrb	r3, [r7, #27]
 8000fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8000fb6:	d005      	beq.n	8000fc4 <ESP01_u8SendDataOverConnection+0x1f4>
	{
		/* Do nothing */
	}else
	{
		status = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		return status;
 8000fbe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fc2:	e085      	b.n	80010d0 <ESP01_u8SendDataOverConnection+0x300>
	}

	u8 total_link[ size_total_link ];
 8000fc4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8000fc8:	460b      	mov	r3, r1
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8000fce:	b28b      	uxth	r3, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	4691      	mov	r9, r2
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fea:	b28b      	uxth	r3, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	461c      	mov	r4, r3
 8000ff0:	4615      	mov	r5, r2
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	00eb      	lsls	r3, r5, #3
 8000ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001000:	00e2      	lsls	r2, r4, #3
 8001002:	460b      	mov	r3, r1
 8001004:	3307      	adds	r3, #7
 8001006:	08db      	lsrs	r3, r3, #3
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	ebad 0d03 	sub.w	sp, sp, r3
 800100e:	466b      	mov	r3, sp
 8001010:	3300      	adds	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
	u16 counter ;

	for( counter = 0 ;counter < sending_method_size ; counter++ ) /* write GET or POST */
 8001014:	2300      	movs	r3, #0
 8001016:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800101a:	e010      	b.n	800103e <ESP01_u8SendDataOverConnection+0x26e>
		total_link[counter] = sending_method[counter];
 800101c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001020:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001024:	3250      	adds	r2, #80	; 0x50
 8001026:	f107 0108 	add.w	r1, r7, #8
 800102a:	440a      	add	r2, r1
 800102c:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 8001030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001032:	54d1      	strb	r1, [r2, r3]
	for( counter = 0 ;counter < sending_method_size ; counter++ ) /* write GET or POST */
 8001034:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001038:	3301      	adds	r3, #1
 800103a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800103e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001042:	b29b      	uxth	r3, r3
 8001044:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001048:	429a      	cmp	r2, r3
 800104a:	d3e7      	bcc.n	800101c <ESP01_u8SendDataOverConnection+0x24c>

	total_link[counter] = ' '; /* space */
 800104c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001052:	2120      	movs	r1, #32
 8001054:	54d1      	strb	r1, [r2, r3]
	counter++;
 8001056:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800105a:	3301      	adds	r3, #1
 800105c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	for( u16 j=0 ; j<size_link ; j++ , counter++ )  /* write link */
 8001060:	2300      	movs	r3, #0
 8001062:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001066:	e012      	b.n	800108e <ESP01_u8SendDataOverConnection+0x2be>
		total_link[counter] = link[j];
 8001068:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	441a      	add	r2, r3
 8001070:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001074:	7811      	ldrb	r1, [r2, #0]
 8001076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001078:	54d1      	strb	r1, [r2, r3]
	for( u16 j=0 ; j<size_link ; j++ , counter++ )  /* write link */
 800107a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800107e:	3301      	adds	r3, #1
 8001080:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001084:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001088:	3301      	adds	r3, #1
 800108a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800108e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001092:	8a7b      	ldrh	r3, [r7, #18]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3e7      	bcc.n	8001068 <ESP01_u8SendDataOverConnection+0x298>

	total_link[counter] = '\r'; /* add \r */
 8001098:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800109c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800109e:	210d      	movs	r1, #13
 80010a0:	54d1      	strb	r1, [r2, r3]
	counter++;
 80010a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80010a6:	3301      	adds	r3, #1
 80010a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	total_link[counter] = '\n'; /* add \n */
 80010ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80010b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010b2:	210a      	movs	r1, #10
 80010b4:	54d1      	strb	r1, [r2, r3]
	counter++;
 80010b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80010ba:	3301      	adds	r3, #1
 80010bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	USART_voidSend( total_link , size_total_link );
 80010c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010c4:	4619      	mov	r1, r3
 80010c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010c8:	f000 f828 	bl	800111c <USART_voidSend>

//	u8 data[MAX_RECEIVED_DATA_SIZE] , size_data;

//	status = ESP01_u8ReceiveDataFromServer( a_data , a_size_data , read_or_write  );

	return status;
 80010cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010d0:	46b5      	mov	sp, r6
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	375c      	adds	r7, #92	; 0x5c
 80010d6:	46bd      	mov	sp, r7
 80010d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010dc:	08001a20 	.word	0x08001a20

080010e0 <USART_voidInit>:
#include "USART_Private.h"
#include "USART_Config.h"

#define SystemCoreClock  25000000

void USART_voidInit(void){
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	/*1- Enable Rx*/
	SET_BIT(USART1->USART_CR1,3);
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <USART_voidInit+0x38>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <USART_voidInit+0x38>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	60d3      	str	r3, [r2, #12]
	SET_BIT(USART1->USART_CR1,2); /* Enable TX */
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <USART_voidInit+0x38>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a08      	ldr	r2, [pc, #32]	; (8001118 <USART_voidInit+0x38>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	60d3      	str	r3, [r2, #12]
	/*USART1 is connected to APB2,8MHZ*/
	USART1->USART_BRR=139;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <USART_voidInit+0x38>)
 80010fe:	228b      	movs	r2, #139	; 0x8b
 8001100:	609a      	str	r2, [r3, #8]
	/*USART1 is connected to APB2,8MHZ*/
	SET_BIT(USART1->USART_CR1,13);
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <USART_voidInit+0x38>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <USART_voidInit+0x38>)
 8001108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800110c:	60d3      	str	r3, [r2, #12]




}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40011000 	.word	0x40011000

0800111c <USART_voidSend>:

void USART_voidSend(u8* Datau8TransData,u16 Copy_u8Length){
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
	u16 local_u8Counter=0;
 8001128:	2300      	movs	r3, #0
 800112a:	81fb      	strh	r3, [r7, #14]
	while(local_u8Counter<Copy_u8Length){
 800112c:	e01a      	b.n	8001164 <USART_voidSend+0x48>
		for(u16 i=0 ; i<5000 ; i++ ){}
 800112e:	2300      	movs	r3, #0
 8001130:	81bb      	strh	r3, [r7, #12]
 8001132:	e002      	b.n	800113a <USART_voidSend+0x1e>
 8001134:	89bb      	ldrh	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	81bb      	strh	r3, [r7, #12]
 800113a:	89bb      	ldrh	r3, [r7, #12]
 800113c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001140:	4293      	cmp	r3, r2
 8001142:	d9f7      	bls.n	8001134 <USART_voidSend+0x18>
		USART1->USART_DR = Datau8TransData[local_u8Counter];
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <USART_voidSend+0x60>)
 800114e:	605a      	str	r2, [r3, #4]
		local_u8Counter++;
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	3301      	adds	r3, #1
 8001154:	81fb      	strh	r3, [r7, #14]
		while( GET_BIT(USART1->USART_SR,6) == 0 );
 8001156:	bf00      	nop
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <USART_voidSend+0x60>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f9      	beq.n	8001158 <USART_voidSend+0x3c>
	while(local_u8Counter<Copy_u8Length){
 8001164:	89fa      	ldrh	r2, [r7, #14]
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3e0      	bcc.n	800112e <USART_voidSend+0x12>

	}

}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40011000 	.word	0x40011000

08001180 <USART_voidReceive>:

void USART_voidReceive(u8* Datau8ReceData)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	while(GET_BIT(USART1->USART_SR,5)==0);
 8001188:	bf00      	nop
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <USART_voidReceive+0x2c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f9      	beq.n	800118a <USART_voidReceive+0xa>
	*Datau8ReceData=USART1->USART_DR;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <USART_voidReceive+0x2c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	701a      	strb	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40011000 	.word	0x40011000

080011b0 <USART_voidReceiveWithouStackPolling>:

u8 USART_voidReceiveWithouStackPolling(u8* Datau8ReceData)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if( GET_BIT(USART1->USART_SR,5) == 1 )
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <USART_voidReceiveWithouStackPolling+0x34>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <USART_voidReceiveWithouStackPolling+0x24>
	{
  	   *Datau8ReceData=USART1->USART_DR;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <USART_voidReceiveWithouStackPolling+0x34>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	701a      	strb	r2, [r3, #0]
		return 1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <USART_voidReceiveWithouStackPolling+0x26>
	}else
	{
		return 0;
 80011d4:	2300      	movs	r3, #0
	}
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40011000 	.word	0x40011000

080011e8 <GPIO_voidSetPin>:

/* An array to collect all my GPIOs */
static GPIO_MemMap_t* GPIO_PORT [MAX_PORTS_NUMBER] = {GPIOA , GPIOB , GPIOC };

void GPIO_voidSetPin( PORT_ID Port_ID , PIN_ID PinNum , u8 value )
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	460b      	mov	r3, r1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	4613      	mov	r3, r2
 80011f8:	717b      	strb	r3, [r7, #5]

	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d82a      	bhi.n	8001256 <GPIO_voidSetPin+0x6e>
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	2b10      	cmp	r3, #16
 8001204:	d827      	bhi.n	8001256 <GPIO_voidSetPin+0x6e>
	{
		/* Do nothing */
	}else
	{
		if( value == SET )
 8001206:	797b      	ldrb	r3, [r7, #5]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d110      	bne.n	800122e <GPIO_voidSetPin+0x46>
		{

			SET_BIT( (GPIO_PORT[Port_ID]->ODR) , PinNum );
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <GPIO_voidSetPin+0x7c>)
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	4618      	mov	r0, r3
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4910      	ldr	r1, [pc, #64]	; (8001264 <GPIO_voidSetPin+0x7c>)
 8001224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001228:	4302      	orrs	r2, r0
 800122a:	615a      	str	r2, [r3, #20]
		}
	}



}
 800122c:	e013      	b.n	8001256 <GPIO_voidSetPin+0x6e>
		}else if( value == RESET )
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d110      	bne.n	8001256 <GPIO_voidSetPin+0x6e>
			CLEAR_BIT( GPIO_PORT[Port_ID]->ODR , PinNum );
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <GPIO_voidSetPin+0x7c>)
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	2101      	movs	r1, #1
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4905      	ldr	r1, [pc, #20]	; (8001264 <GPIO_voidSetPin+0x7c>)
 800124e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001252:	4002      	ands	r2, r0
 8001254:	615a      	str	r2, [r3, #20]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000

08001268 <GPIO_voidPinMode>:


void GPIO_voidPinMode( PORT_ID Port_ID , PIN_ID PinNum , MODE mode )
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	460b      	mov	r3, r1
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	4613      	mov	r3, r2
 8001278:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d81a      	bhi.n	80012b6 <GPIO_voidPinMode+0x4e>
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d817      	bhi.n	80012b6 <GPIO_voidPinMode+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->MODER) = ( (GPIO_PORT[Port_ID]->MODER) & (~(0b11 << 2*PinNum)) ) | ( mode << 2*PinNum );
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <GPIO_voidPinMode+0x5c>)
 800128a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	79ba      	ldrb	r2, [r7, #6]
 8001292:	0052      	lsls	r2, r2, #1
 8001294:	2103      	movs	r1, #3
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	43d2      	mvns	r2, r2
 800129c:	401a      	ands	r2, r3
 800129e:	7979      	ldrb	r1, [r7, #5]
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4905      	ldr	r1, [pc, #20]	; (80012c4 <GPIO_voidPinMode+0x5c>)
 80012ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012b2:	4302      	orrs	r2, r0
 80012b4:	601a      	str	r2, [r3, #0]
	}

}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000000 	.word	0x20000000

080012c8 <GPIO_voidPinOutputMode>:

	return value;
}

void GPIO_voidPinOutputMode(  PORT_ID Port_ID , PIN_ID PinNum , OUTPUT_MODE mode )
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	460b      	mov	r3, r1
 80012d4:	71bb      	strb	r3, [r7, #6]
 80012d6:	4613      	mov	r3, r2
 80012d8:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d812      	bhi.n	8001306 <GPIO_voidPinOutputMode+0x3e>
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d80f      	bhi.n	8001306 <GPIO_voidPinOutputMode+0x3e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->OTYPER) = (GPIO_PORT[Port_ID]->OTYPER) | (mode << PinNum) ;
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <GPIO_voidPinOutputMode+0x4c>)
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	7979      	ldrb	r1, [r7, #5]
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4905      	ldr	r1, [pc, #20]	; (8001314 <GPIO_voidPinOutputMode+0x4c>)
 80012fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001302:	4302      	orrs	r2, r0
 8001304:	605a      	str	r2, [r3, #4]
	}

}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000000 	.word	0x20000000

08001318 <GPIO_voidOutputSpeed>:

void GPIO_voidOutputSpeed( PORT_ID Port_ID , PIN_ID PinNum , OUTPUT_SPEED speed )
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	460b      	mov	r3, r1
 8001324:	71bb      	strb	r3, [r7, #6]
 8001326:	4613      	mov	r3, r2
 8001328:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d81a      	bhi.n	8001366 <GPIO_voidOutputSpeed+0x4e>
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b10      	cmp	r3, #16
 8001334:	d817      	bhi.n	8001366 <GPIO_voidOutputSpeed+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->OSPEEDR) = ( (GPIO_PORT[Port_ID]->OSPEEDR) & (~(0b11 << 2*PinNum)) ) | ( speed << 2*PinNum );
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <GPIO_voidOutputSpeed+0x5c>)
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	79ba      	ldrb	r2, [r7, #6]
 8001342:	0052      	lsls	r2, r2, #1
 8001344:	2103      	movs	r1, #3
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	43d2      	mvns	r2, r2
 800134c:	401a      	ands	r2, r3
 800134e:	7979      	ldrb	r1, [r7, #5]
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	4618      	mov	r0, r3
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4905      	ldr	r1, [pc, #20]	; (8001374 <GPIO_voidOutputSpeed+0x5c>)
 800135e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001362:	4302      	orrs	r2, r0
 8001364:	609a      	str	r2, [r3, #8]
	}

}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000

08001378 <GPIO_void_PullType>:

void GPIO_void_PullType( PORT_ID Port_ID , PIN_ID PinNum , PULL_TYPE Pull_type )
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	460b      	mov	r3, r1
 8001384:	71bb      	strb	r3, [r7, #6]
 8001386:	4613      	mov	r3, r2
 8001388:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d81a      	bhi.n	80013c6 <GPIO_void_PullType+0x4e>
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d817      	bhi.n	80013c6 <GPIO_void_PullType+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->PUPDR) = ( (GPIO_PORT[Port_ID]->PUPDR) & (~(0b11 << 2*PinNum)) ) | ( Pull_type << 2*PinNum );
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <GPIO_void_PullType+0x5c>)
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	79ba      	ldrb	r2, [r7, #6]
 80013a2:	0052      	lsls	r2, r2, #1
 80013a4:	2103      	movs	r1, #3
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	43d2      	mvns	r2, r2
 80013ac:	401a      	ands	r2, r3
 80013ae:	7979      	ldrb	r1, [r7, #5]
 80013b0:	79bb      	ldrb	r3, [r7, #6]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4905      	ldr	r1, [pc, #20]	; (80013d4 <GPIO_void_PullType+0x5c>)
 80013be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c2:	4302      	orrs	r2, r0
 80013c4:	60da      	str	r2, [r3, #12]
	}

}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000

080013d8 <GPIO_setAlternativeFunction>:
	return value;

}

void GPIO_setAlternativeFunction( PORT_ID port_id , PIN_ID pin_id , ALTERNATIVE_FUNCTION altternative_fun )
{
 80013d8:	b490      	push	{r4, r7}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	460b      	mov	r3, r1
 80013e4:	71bb      	strb	r3, [r7, #6]
 80013e6:	4613      	mov	r3, r2
 80013e8:	717b      	strb	r3, [r7, #5]
	if( port_id > MAX_PORTS_NUMBER  || pin_id > MAX_PINS_NUMBER )
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d82b      	bhi.n	8001448 <GPIO_setAlternativeFunction+0x70>
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	d828      	bhi.n	8001448 <GPIO_setAlternativeFunction+0x70>
	{
		/* Do nothing */
	}else
	{
		u8 bit_num = (pin_id % 8U)*4U ;
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	73fb      	strb	r3, [r7, #15]
		(GPIO_PORT[port_id]->AFR[pin_id/8U]) = ( (GPIO_PORT[port_id]->AFR[pin_id/8U]) & ( ~( (0b1111) << (bit_num) ) ) ) | ( (altternative_fun) <<  (bit_num) ) ;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <GPIO_setAlternativeFunction+0x7c>)
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	08d2      	lsrs	r2, r2, #3
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	3208      	adds	r2, #8
 8001412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	210f      	movs	r1, #15
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	43d2      	mvns	r2, r2
 8001420:	401a      	ands	r2, r3
 8001422:	7979      	ldrb	r1, [r7, #5]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	461c      	mov	r4, r3
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <GPIO_setAlternativeFunction+0x7c>)
 8001430:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001434:	79b9      	ldrb	r1, [r7, #6]
 8001436:	08c9      	lsrs	r1, r1, #3
 8001438:	b2c9      	uxtb	r1, r1
 800143a:	4608      	mov	r0, r1
 800143c:	ea42 0104 	orr.w	r1, r2, r4
 8001440:	f100 0208 	add.w	r2, r0, #8
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bc90      	pop	{r4, r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000

08001458 <GPIO_voidInti>:
 * @brief This function initialize GPIO pin according
 * @param[in] pin_config : A struct contains the initialization values
 * @retval void
 *********************************************************************************/
void GPIO_voidInti( const GPIO_PIN_CONFIG_T *pin_config )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	PORT_ID port_id  = pin_config->port_id;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	73fb      	strb	r3, [r7, #15]
	PIN_ID pin_id    = pin_config->pin_id;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	73bb      	strb	r3, [r7, #14]

	/* Pin Mode */
	GPIO_voidPinMode( port_id , pin_id ,pin_config->mode );
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	789a      	ldrb	r2, [r3, #2]
 8001470:	7bb9      	ldrb	r1, [r7, #14]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fef7 	bl	8001268 <GPIO_voidPinMode>

	/* Pull type */
	GPIO_void_PullType( port_id , pin_id , pin_config->pull_type );
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	78da      	ldrb	r2, [r3, #3]
 800147e:	7bb9      	ldrb	r1, [r7, #14]
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff78 	bl	8001378 <GPIO_void_PullType>

	if( (pin_config->mode) == GPIO_INPUT || (pin_config->mode) == GPIO_ANALOG_MODE ) /* Input or Analog */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d02f      	beq.n	80014f0 <GPIO_voidInti+0x98>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d02b      	beq.n	80014f0 <GPIO_voidInti+0x98>
	{

		/* DO NOTHING */

	}else if( (pin_config->mode) == GPIO_OUTPUT ) /* Output */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	789b      	ldrb	r3, [r3, #2]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10e      	bne.n	80014be <GPIO_voidInti+0x66>
	{
		/* Output mode */
		GPIO_voidPinOutputMode(  port_id , pin_id , pin_config->out_mode );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	791a      	ldrb	r2, [r3, #4]
 80014a4:	7bb9      	ldrb	r1, [r7, #14]
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff0d 	bl	80012c8 <GPIO_voidPinOutputMode>

		/* Output speed */
		GPIO_voidOutputSpeed(  port_id , pin_id , pin_config->out_speed );
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	795a      	ldrb	r2, [r3, #5]
 80014b2:	7bb9      	ldrb	r1, [r7, #14]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff2e 	bl	8001318 <GPIO_voidOutputSpeed>

		/* ALlternative fun */
		GPIO_setAlternativeFunction(port_id , pin_id , pin_config->alternative_fun );
	}

}
 80014bc:	e018      	b.n	80014f0 <GPIO_voidInti+0x98>
	}else if( (pin_config->mode) == GPIO_ALTERNATIVE_FUNCTION )  /* Alternative function */
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	789b      	ldrb	r3, [r3, #2]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d114      	bne.n	80014f0 <GPIO_voidInti+0x98>
		GPIO_voidPinOutputMode(  port_id , pin_id , pin_config->out_mode );
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	791a      	ldrb	r2, [r3, #4]
 80014ca:	7bb9      	ldrb	r1, [r7, #14]
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fefa 	bl	80012c8 <GPIO_voidPinOutputMode>
		GPIO_voidOutputSpeed(  port_id , pin_id , pin_config->out_speed );
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	795a      	ldrb	r2, [r3, #5]
 80014d8:	7bb9      	ldrb	r1, [r7, #14]
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff1b 	bl	8001318 <GPIO_voidOutputSpeed>
		GPIO_setAlternativeFunction(port_id , pin_id , pin_config->alternative_fun );
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	799a      	ldrb	r2, [r3, #6]
 80014e6:	7bb9      	ldrb	r1, [r7, #14]
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff74 	bl	80013d8 <GPIO_setAlternativeFunction>
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <RCC_voidInitSysCls>:
/* Parameters in  :    void                                                      */
/* Parameters out :    void                                                      */
/* Description    :    This function init the RCC module                        */
/*********************************************************************************/
void RCC_voidInitSysCls(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

#if RCC_CLK_SRC == HSI  /* Internal clock */

	/* choose system clock */
	CLEAR_BIT(RCC_CFGR,SW0);
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <RCC_voidInitSysCls+0x4c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <RCC_voidInitSysCls+0x4c>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC_CFGR,SW1);
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <RCC_voidInitSysCls+0x4c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <RCC_voidInitSysCls+0x4c>)
 800150e:	f023 0302 	bic.w	r3, r3, #2
 8001512:	6013      	str	r3, [r2, #0]

	CLEAR_BIT(RCC_CR , HSEON );
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <RCC_voidInitSysCls+0x50>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <RCC_voidInitSysCls+0x50>)
 800151a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC_CR , PLLON );
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <RCC_voidInitSysCls+0x50>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a08      	ldr	r2, [pc, #32]	; (8001548 <RCC_voidInitSysCls+0x50>)
 8001526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800152a:	6013      	str	r3, [r2, #0]
	SET_BIT(  RCC_CR , HSION );
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <RCC_voidInitSysCls+0x50>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a05      	ldr	r2, [pc, #20]	; (8001548 <RCC_voidInitSysCls+0x50>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

#else
#error "Not suitable clock selected in init"
#endif

}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023808 	.word	0x40023808
 8001548:	40023800 	.word	0x40023800

0800154c <RCC_voidEnablePerpheralClk>:
/* Parameters in  :    BusID , PerpheralId                                       */
/* Parameters out :    void                                                      */
/* Description    :    This function enable the perpheral clock                  */
/*********************************************************************************/
void RCC_voidEnablePerpheralClk(u8 BusId , u8 PerpheralId )
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	71bb      	strb	r3, [r7, #6]
	if( BusId > MAX_BUSE_NUMBER || PerpheralId > MAX_PERIPHERAL_PER_BUS )
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d83c      	bhi.n	80015dc <RCC_voidEnablePerpheralClk+0x90>
 8001562:	79bb      	ldrb	r3, [r7, #6]
 8001564:	2b1f      	cmp	r3, #31
 8001566:	d839      	bhi.n	80015dc <RCC_voidEnablePerpheralClk+0x90>
	{
		/* Do nothing */
	}else
	{
		switch( BusId )
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d836      	bhi.n	80015dc <RCC_voidEnablePerpheralClk+0x90>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <RCC_voidEnablePerpheralClk+0x28>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	08001585 	.word	0x08001585
 8001578:	0800159b 	.word	0x0800159b
 800157c:	080015b1 	.word	0x080015b1
 8001580:	080015c7 	.word	0x080015c7
		{
		case AHB1:

			SET_BIT( RCC_AHB1ENR , PerpheralId );
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <RCC_voidEnablePerpheralClk+0x9c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	79ba      	ldrb	r2, [r7, #6]
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	4611      	mov	r1, r2
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <RCC_voidEnablePerpheralClk+0x9c>)
 8001594:	430b      	orrs	r3, r1
 8001596:	6013      	str	r3, [r2, #0]
			break;
 8001598:	e020      	b.n	80015dc <RCC_voidEnablePerpheralClk+0x90>
		case AHB2:
			SET_BIT( RCC_AHB2ENR , PerpheralId );
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <RCC_voidEnablePerpheralClk+0xa0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	79ba      	ldrb	r2, [r7, #6]
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <RCC_voidEnablePerpheralClk+0xa0>)
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6013      	str	r3, [r2, #0]
			break;
 80015ae:	e015      	b.n	80015dc <RCC_voidEnablePerpheralClk+0x90>
		case APB1:
			SET_BIT( RCC_APB1ENR , PerpheralId );
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <RCC_voidEnablePerpheralClk+0xa4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4611      	mov	r1, r2
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <RCC_voidEnablePerpheralClk+0xa4>)
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6013      	str	r3, [r2, #0]
			break;
 80015c4:	e00a      	b.n	80015dc <RCC_voidEnablePerpheralClk+0x90>
		case APB2:
			SET_BIT( RCC_APB2ENR , PerpheralId );
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <RCC_voidEnablePerpheralClk+0xa8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	79ba      	ldrb	r2, [r7, #6]
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	4611      	mov	r1, r2
 80015d4:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <RCC_voidEnablePerpheralClk+0xa8>)
 80015d6:	430b      	orrs	r3, r1
 80015d8:	6013      	str	r3, [r2, #0]
			break;
 80015da:	bf00      	nop

		}
	}

}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40023830 	.word	0x40023830
 80015ec:	40023834 	.word	0x40023834
 80015f0:	40023840 	.word	0x40023840
 80015f4:	40023844 	.word	0x40023844

080015f8 <SYSTICK_voidInit>:

static volatile void (*g_callBackFun) (void) = NULL;
s32 g_state;

void SYSTICK_voidInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

#if ( SYSTICK_CLOCK == AHB_DIV_8 )
	CLEAR_BIT( STK_CTRL , CLKSOURCE );
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SYSTICK_voidInit+0x1c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <SYSTICK_voidInit+0x1c>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6013      	str	r3, [r2, #0]
#else
	SET_BIT( STK_CTRL , CLKSOURCE );
#endif


}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <SYSTICK_voidDisable>:

void SYSTICK_voidDisable(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	CLEAR_BIT( STK_CTRL , ENABLE );  /* Disable timer */
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <SYSTICK_voidDisable+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SYSTICK_voidDisable+0x34>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6013      	str	r3, [r2, #0]
	CLEAR_BIT( STK_CTRL , TICKINT ); /* Disable exception  */
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <SYSTICK_voidDisable+0x34>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <SYSTICK_voidDisable+0x34>)
 800162e:	f023 0302 	bic.w	r3, r3, #2
 8001632:	6013      	str	r3, [r2, #0]
	STK_VAL  = 0; /* Make it count from zero */
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <SYSTICK_voidDisable+0x38>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
	STK_LOAD = 0;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SYSTICK_voidDisable+0x3c>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010
 8001650:	e000e018 	.word	0xe000e018
 8001654:	e000e014 	.word	0xe000e014

08001658 <SYSTICK_voidSetIntervalNumber>:
	SET_BIT( STK_CTRL , TICKINT );  /* Open exception */
	SET_BIT( STK_CTRL , ENABLE ); /* Enable timer */
}

void SYSTICK_voidSetIntervalNumber( u32 a_number_of_delay_ticks , s32 a_number_of_intervals , void (*a_callBackFun)(void) )
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	STK_LOAD = a_number_of_delay_ticks; /* Put the number of ticks in reload value */
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <SYSTICK_voidSetIntervalNumber+0x44>)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6013      	str	r3, [r2, #0]
	g_callBackFun = a_callBackFun;  /* Put call back function */
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <SYSTICK_voidSetIntervalNumber+0x48>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6013      	str	r3, [r2, #0]
	g_state = a_number_of_intervals ;
 8001670:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <SYSTICK_voidSetIntervalNumber+0x4c>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	6013      	str	r3, [r2, #0]
	SET_BIT( STK_CTRL , TICKINT );  /* Open exception */
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <SYSTICK_voidSetIntervalNumber+0x50>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <SYSTICK_voidSetIntervalNumber+0x50>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6013      	str	r3, [r2, #0]
	SET_BIT( STK_CTRL , ENABLE );   /* Enable timer */
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <SYSTICK_voidSetIntervalNumber+0x50>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <SYSTICK_voidSetIntervalNumber+0x50>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6013      	str	r3, [r2, #0]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e014 	.word	0xe000e014
 80016a0:	20000028 	.word	0x20000028
 80016a4:	2000002c 	.word	0x2000002c
 80016a8:	e000e010 	.word	0xe000e010

080016ac <SysTick_Handler>:
}


/* ISR of SYSTICK */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	if( g_callBackFun != NULL )
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <SysTick_Handler+0x44>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d019      	beq.n	80016ec <SysTick_Handler+0x40>
	{
		if( g_state == 1 )
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <SysTick_Handler+0x48>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <SysTick_Handler+0x20>
		{
			SYSTICK_voidDisable(); /* Disable timer */
 80016c0:	f7ff ffaa 	bl	8001618 <SYSTICK_voidDisable>
			g_callBackFun();
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <SysTick_Handler+0x44>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4798      	blx	r3
		{
			g_callBackFun();
		}
	}

}
 80016ca:	e00f      	b.n	80016ec <SysTick_Handler+0x40>
		}else if( g_state > 1 )
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <SysTick_Handler+0x48>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	dd08      	ble.n	80016e6 <SysTick_Handler+0x3a>
			g_callBackFun();
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SysTick_Handler+0x44>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4798      	blx	r3
			g_state--;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SysTick_Handler+0x48>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <SysTick_Handler+0x48>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	e002      	b.n	80016ec <SysTick_Handler+0x40>
			g_callBackFun();
 80016e6:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <SysTick_Handler+0x44>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4798      	blx	r3
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000028 	.word	0x20000028
 80016f4:	2000002c 	.word	0x2000002c

080016f8 <main>:

#include "queue.h"
#include "APP.h"

int main(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0e6      	sub	sp, #408	; 0x198
 80016fc:	af00      	add	r7, sp, #0

	APP_Init();
 80016fe:	f7fe fdf5 	bl	80002ec <APP_Init>

	/* Connect to WiFi */
	APP_voidOpenWifiErrorLed();
 8001702:	f7fe fde1 	bl	80002c8 <APP_voidOpenWifiErrorLed>
	APP_u8InitWifiConnection();
 8001706:	f7fe fe59 	bl	80003bc <APP_u8InitWifiConnection>
	APP_voidCloseWifiErrorLed();
 800170a:	f7fe fde6 	bl	80002da <APP_voidCloseWifiErrorLed>

	while(1)
	{

		if( NUMBER_OF_SAMPLES_TO_SEND_DATA <= queue_size() ) /* Send data */
 800170e:	f000 f8a9 	bl	8001864 <queue_size>
 8001712:	4603      	mov	r3, r0
 8001714:	2b63      	cmp	r3, #99	; 0x63
 8001716:	d9fa      	bls.n	800170e <main+0x16>
		{
			QUEUE_DATATYPE data[NUMBER_OF_SAMPLES_TO_SEND_DATA];
			for(u16 i=0 ; i<NUMBER_OF_SAMPLES_TO_SEND_DATA ; i++ )
 8001718:	2300      	movs	r3, #0
 800171a:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 800171e:	e00c      	b.n	800173a <main+0x42>
			    dequeue( data+i );
 8001720:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	1d3a      	adds	r2, r7, #4
 8001728:	4413      	add	r3, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f85c 	bl	80017e8 <dequeue>
			for(u16 i=0 ; i<NUMBER_OF_SAMPLES_TO_SEND_DATA ; i++ )
 8001730:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8001734:	3301      	adds	r3, #1
 8001736:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
 800173a:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 800173e:	2b63      	cmp	r3, #99	; 0x63
 8001740:	d9ee      	bls.n	8001720 <main+0x28>
			/*Send data*/
			APP_voidSendData( data , NUMBER_OF_SAMPLES_TO_SEND_DATA );
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2164      	movs	r1, #100	; 0x64
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fff5 	bl	8000736 <APP_voidSendData>
		if( NUMBER_OF_SAMPLES_TO_SEND_DATA <= queue_size() ) /* Send data */
 800174c:	e7df      	b.n	800170e <main+0x16>
	...

08001750 <Queue_init>:
static u16 queue_front;
static s16 queue_counter;
static QUEUE_DATATYPE queue_array[QUEUE_SIZE];

void Queue_init()
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
	queue_front = 0;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <Queue_init+0x1c>)
 8001756:	2200      	movs	r2, #0
 8001758:	801a      	strh	r2, [r3, #0]
	queue_rear = 0;
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <Queue_init+0x20>)
 800175c:	2200      	movs	r2, #0
 800175e:	801a      	strh	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000032 	.word	0x20000032
 8001770:	20000030 	.word	0x20000030

08001774 <enqueue>:

void enqueue(QUEUE_DATATYPE *a_data)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if( queue_counter == QUEUE_SIZE ) /* queue is full */
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <enqueue+0x64>)
 800177e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d008      	beq.n	8001798 <enqueue+0x24>
	{

	}else
		queue_counter++;
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <enqueue+0x64>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	b29b      	uxth	r3, r3
 800178e:	3301      	adds	r3, #1
 8001790:	b29b      	uxth	r3, r3
 8001792:	b21a      	sxth	r2, r3
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <enqueue+0x64>)
 8001796:	801a      	strh	r2, [r3, #0]

	queue_array[queue_rear] = *a_data;
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <enqueue+0x68>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <enqueue+0x6c>)
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	460a      	mov	r2, r1
 80017a6:	6810      	ldr	r0, [r2, #0]
 80017a8:	6018      	str	r0, [r3, #0]
	queue_rear = (queue_rear+1)%QUEUE_SIZE; /*To make queue cycler*/
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <enqueue+0x68>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <enqueue+0x70>)
 80017b2:	fb82 1203 	smull	r1, r2, r2, r3
 80017b6:	1151      	asrs	r1, r2, #5
 80017b8:	17da      	asrs	r2, r3, #31
 80017ba:	1a8a      	subs	r2, r1, r2
 80017bc:	2164      	movs	r1, #100	; 0x64
 80017be:	fb01 f202 	mul.w	r2, r1, r2
 80017c2:	1a9a      	subs	r2, r3, r2
 80017c4:	b292      	uxth	r2, r2
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <enqueue+0x68>)
 80017c8:	801a      	strh	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000034 	.word	0x20000034
 80017dc:	20000030 	.word	0x20000030
 80017e0:	20000038 	.word	0x20000038
 80017e4:	51eb851f 	.word	0x51eb851f

080017e8 <dequeue>:

u8 dequeue( QUEUE_DATATYPE *a_data )
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if( queue_counter == 0 ) /* queue is empty */
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <dequeue+0x6c>)
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <dequeue+0x16>
	{
        return -1;
 80017fa:	23ff      	movs	r3, #255	; 0xff
 80017fc:	e023      	b.n	8001846 <dequeue+0x5e>
	}else
		queue_counter--;
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <dequeue+0x6c>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <dequeue+0x6c>)
 800180e:	801a      	strh	r2, [r3, #0]

	u16 x =queue_front;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <dequeue+0x70>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	81fb      	strh	r3, [r7, #14]
	queue_front = (queue_front+1)%QUEUE_SIZE ;  /*To make queue cycler*/
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <dequeue+0x70>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a0f      	ldr	r2, [pc, #60]	; (800185c <dequeue+0x74>)
 800181e:	fb82 1203 	smull	r1, r2, r2, r3
 8001822:	1151      	asrs	r1, r2, #5
 8001824:	17da      	asrs	r2, r3, #31
 8001826:	1a8a      	subs	r2, r1, r2
 8001828:	2164      	movs	r1, #100	; 0x64
 800182a:	fb01 f202 	mul.w	r2, r1, r2
 800182e:	1a9a      	subs	r2, r3, r2
 8001830:	b292      	uxth	r2, r2
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <dequeue+0x70>)
 8001834:	801a      	strh	r2, [r3, #0]
	*a_data = queue_array[x];
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <dequeue+0x78>)
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	6008      	str	r0, [r1, #0]
	return 1;
 8001844:	2301      	movs	r3, #1

}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000034 	.word	0x20000034
 8001858:	20000032 	.word	0x20000032
 800185c:	51eb851f 	.word	0x51eb851f
 8001860:	20000038 	.word	0x20000038

08001864 <queue_size>:

u16 queue_size()
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
	return queue_counter;
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <queue_size+0x18>)
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	b29b      	uxth	r3, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000034 	.word	0x20000034

08001880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001882:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001884:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <LoopForever+0x6>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LoopForever+0xe>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	; (80018cc <LoopForever+0x16>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018ae:	f000 f819 	bl	80018e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b2:	f7ff ff21 	bl	80016f8 <main>

080018b6 <LoopForever>:

LoopForever:
  b LoopForever
 80018b6:	e7fe      	b.n	80018b6 <LoopForever>
  ldr   r0, =_estack
 80018b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018c4:	08001a34 	.word	0x08001a34
  ldr r2, =_sbss
 80018c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018cc:	200001c8 	.word	0x200001c8

080018d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>

080018d2 <memset>:
 80018d2:	4402      	add	r2, r0
 80018d4:	4603      	mov	r3, r0
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d100      	bne.n	80018dc <memset+0xa>
 80018da:	4770      	bx	lr
 80018dc:	f803 1b01 	strb.w	r1, [r3], #1
 80018e0:	e7f9      	b.n	80018d6 <memset+0x4>
	...

080018e4 <__libc_init_array>:
 80018e4:	b570      	push	{r4, r5, r6, lr}
 80018e6:	4d0d      	ldr	r5, [pc, #52]	; (800191c <__libc_init_array+0x38>)
 80018e8:	4c0d      	ldr	r4, [pc, #52]	; (8001920 <__libc_init_array+0x3c>)
 80018ea:	1b64      	subs	r4, r4, r5
 80018ec:	10a4      	asrs	r4, r4, #2
 80018ee:	2600      	movs	r6, #0
 80018f0:	42a6      	cmp	r6, r4
 80018f2:	d109      	bne.n	8001908 <__libc_init_array+0x24>
 80018f4:	4d0b      	ldr	r5, [pc, #44]	; (8001924 <__libc_init_array+0x40>)
 80018f6:	4c0c      	ldr	r4, [pc, #48]	; (8001928 <__libc_init_array+0x44>)
 80018f8:	f000 f818 	bl	800192c <_init>
 80018fc:	1b64      	subs	r4, r4, r5
 80018fe:	10a4      	asrs	r4, r4, #2
 8001900:	2600      	movs	r6, #0
 8001902:	42a6      	cmp	r6, r4
 8001904:	d105      	bne.n	8001912 <__libc_init_array+0x2e>
 8001906:	bd70      	pop	{r4, r5, r6, pc}
 8001908:	f855 3b04 	ldr.w	r3, [r5], #4
 800190c:	4798      	blx	r3
 800190e:	3601      	adds	r6, #1
 8001910:	e7ee      	b.n	80018f0 <__libc_init_array+0xc>
 8001912:	f855 3b04 	ldr.w	r3, [r5], #4
 8001916:	4798      	blx	r3
 8001918:	3601      	adds	r6, #1
 800191a:	e7f2      	b.n	8001902 <__libc_init_array+0x1e>
 800191c:	08001a2c 	.word	0x08001a2c
 8001920:	08001a2c 	.word	0x08001a2c
 8001924:	08001a2c 	.word	0x08001a2c
 8001928:	08001a30 	.word	0x08001a30

0800192c <_init>:
 800192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192e:	bf00      	nop
 8001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001932:	bc08      	pop	{r3}
 8001934:	469e      	mov	lr, r3
 8001936:	4770      	bx	lr

08001938 <_fini>:
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193a:	bf00      	nop
 800193c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800193e:	bc08      	pop	{r3}
 8001940:	469e      	mov	lr, r3
 8001942:	4770      	bx	lr
