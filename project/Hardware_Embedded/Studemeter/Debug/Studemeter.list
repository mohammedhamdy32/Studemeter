
Studemeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001778  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001910  08001910  00011910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001958  08001958  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001958  08001958  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001958  08001958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800195c  0800195c  0001195c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000000c  0800196c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800196c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b83  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000969  00000000  00000000  00021c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00022570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000175  00000000  00000000  00022790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000101f  00000000  00000000  00022905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011ce  00000000  00000000  00023924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004377  00000000  00000000  00024af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000007fc  00000000  00000000  00028e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00029668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080018f8 	.word	0x080018f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080018f8 	.word	0x080018f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <ADC_vInit>:
		}
	}
}

void ADC_vInit(const ADC_ConfigType* Ptr_config)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(NULL != Ptr_config)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d01f      	beq.n	8000a02 <ADC_vInit+0x4e>
	{
		/* Choose resolution and set scan mode */
		ADC->CR1 = (Ptr_config->res << RES) | (Ptr_config->scanMode << SCAN);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	061a      	lsls	r2, r3, #24
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	785b      	ldrb	r3, [r3, #1]
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	431a      	orrs	r2, r3
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <ADC_vInit+0x5c>)
 80009d2:	605a      	str	r2, [r3, #4]
		/* Set clock Prescaler for ADC */
		ADC_CCR = (ADC_CCR & ~ADCPRE_MASK) | ((Ptr_config->prescaler << ADCPRE) & ADCPRE_MASK);
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <ADC_vInit+0x60>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009e6:	490b      	ldr	r1, [pc, #44]	; (8000a14 <ADC_vInit+0x60>)
 80009e8:	4313      	orrs	r3, r2
 80009ea:	600b      	str	r3, [r1, #0]
		/* configure End of conversion selection and continuous mode and Enable ADC  */
		ADC->CR2 = (Ptr_config->eachConvFlag << ECOS) | (Ptr_config->contConv << CONT) | (1 << ADON);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	029a      	lsls	r2, r3, #10
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4313      	orrs	r3, r2
 80009fa:	f043 0201 	orr.w	r2, r3, #1
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <ADC_vInit+0x5c>)
 8000a00:	609a      	str	r2, [r3, #8]
#ifdef ENABLE_INTERRUPT
		ADC->CR1 |= (1 << EOCIE);
#endif
	}
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40012000 	.word	0x40012000
 8000a14:	40012304 	.word	0x40012304

08000a18 <ADC_u16ReadChannel>:
	while(!(ADC->SR & (1 << EOC)));
	return ADC->DR;
}

u16 ADC_u16ReadChannel(u8 Copy_u8Channel)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	/* Select Channel */
	ADC->SQR[2] = (ADC->SQR[2] & 0xFFFFFFE0) | Copy_u8Channel;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <ADC_u16ReadChannel+0x48>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	f023 021f 	bic.w	r2, r3, #31
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <ADC_u16ReadChannel+0x48>)
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	634b      	str	r3, [r1, #52]	; 0x34
	/* Start Conversion */
	ADC->CR2 |= (1 << SWSTART);
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <ADC_u16ReadChannel+0x48>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <ADC_u16ReadChannel+0x48>)
 8000a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000a3c:	6093      	str	r3, [r2, #8]
	/* Wait till conversion is done */
	while(!(ADC->SR & (1 << EOC)));
 8000a3e:	bf00      	nop
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <ADC_u16ReadChannel+0x48>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f9      	beq.n	8000a40 <ADC_u16ReadChannel+0x28>
	/* Return ADC reading which also clears EOC flag */
	return ADC->DR;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <ADC_u16ReadChannel+0x48>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	b29b      	uxth	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40012000 	.word	0x40012000

08000a64 <APP_SystickCallBackFun>:




static void APP_SystickCallBackFun(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	u16 gsr_reading = ADC_u16ReadChannel(GSR_PIN_NUM);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffd4 	bl	8000a18 <ADC_u16ReadChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	80fb      	strh	r3, [r7, #6]
	Queue_data_t q_data = { gsr_reading , 0 };
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	803b      	strh	r3, [r7, #0]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	70bb      	strb	r3, [r7, #2]
	enqueue( &q_data );
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fe0a 	bl	8001698 <enqueue>

}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <APP_Init>:

void APP_Init()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
	/***** Initializations *****/
	Queue_init();
 8000a92:	f000 fdef 	bl	8001674 <Queue_init>

	/* RCC */
	RCC_voidInitSysCls();
 8000a96:	f000 f9cb 	bl	8000e30 <RCC_voidInitSysCls>
	RCC_voidEnablePerpheralClk( AHB1 , GPIOA_ID );
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f9f1 	bl	8000e84 <RCC_voidEnablePerpheralClk>
	RCC_voidEnablePerpheralClk( AHB1 , GPIOB_ID );
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f9ed 	bl	8000e84 <RCC_voidEnablePerpheralClk>
	RCC_voidEnablePerpheralClk(APB2  , ADC_ID ); /* ADC */
 8000aaa:	2108      	movs	r1, #8
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f9e9 	bl	8000e84 <RCC_voidEnablePerpheralClk>


	/* ADC configuration and initialization */
	GPIO_PIN_CONFIG_T gpio_config = { GSR_PORT_NUM , GSR_PIN_NUM , GPIO_ANALOG_MODE , NO_PULL , 0 , 0 , 0 };
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	763b      	strb	r3, [r7, #24]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	767b      	strb	r3, [r7, #25]
 8000aba:	2303      	movs	r3, #3
 8000abc:	76bb      	strb	r3, [r7, #26]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	76fb      	strb	r3, [r7, #27]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	773b      	strb	r3, [r7, #28]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	777b      	strb	r3, [r7, #29]
 8000aca:	2300      	movs	r3, #0
 8000acc:	77bb      	strb	r3, [r7, #30]
	GPIO_voidInti( &gpio_config );
 8000ace:	f107 0318 	add.w	r3, r7, #24
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f95c 	bl	8000d90 <GPIO_voidInti>
	ADC_ConfigType adcConfig = {TWELVE_BIT, 0 , 0 , 0 , PCLK2_8};
 8000ad8:	2300      	movs	r3, #0
 8000ada:	743b      	strb	r3, [r7, #16]
 8000adc:	2300      	movs	r3, #0
 8000ade:	747b      	strb	r3, [r7, #17]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	74bb      	strb	r3, [r7, #18]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	74fb      	strb	r3, [r7, #19]
 8000ae8:	2303      	movs	r3, #3
 8000aea:	753b      	strb	r3, [r7, #20]
	ADC_vInit(&adcConfig);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5f 	bl	80009b4 <ADC_vInit>

	/* USART */
	USART_config uart_config = { USART1_NUM , ONE_BIT , DISABLE_PARITY , BIT8_WORD , OVERSAMPLING_16 , 9600 };
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <APP_Init+0x9c>)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000afc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	USART_voidInit( &uart_config );
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fa94 	bl	8001030 <USART_voidInit>
	USART_sendWord( USART1_NUM , ' ');
 8000b08:	2120      	movs	r1, #32
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 fd16 	bl	800153c <USART_sendWord>

	/* Systick */
	SYSTICK_voidInit();
 8000b10:	f000 fa0e 	bl	8000f30 <SYSTICK_voidInit>

	/* Pass call back function to systick */
	SYSTICK_voidSetIntervalNumber( (2000000.0)/GSR_SAMPLING_RATE_HZ , INFINITY_TIMES , APP_SystickCallBackFun );
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <APP_Init+0xa0>)
 8000b16:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <APP_Init+0xa4>)
 8000b1c:	f000 fa38 	bl	8000f90 <SYSTICK_voidSetIntervalNumber>

}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	08001910 	.word	0x08001910
 8000b2c:	08000a65 	.word	0x08000a65
 8000b30:	00030d40 	.word	0x00030d40

08000b34 <APP_send_data>:


void APP_send_data( QUEUE_DATATYPE *a_data , u16 a_size )
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
	u8 numInAsci[16];

	for(u16 i=0; i <a_size ; i++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	83fb      	strh	r3, [r7, #30]
 8000b44:	e023      	b.n	8000b8e <APP_send_data+0x5a>
	{
	   itoa( a_data[i].GSR_reading , numInAsci , 10);
 8000b46:	8bfb      	ldrh	r3, [r7, #30]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	220a      	movs	r2, #10
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f000 fe64 	bl	8001826 <itoa>
	   USART_sendString( USART1_NUM , numInAsci );
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fd43 	bl	80015f0 <USART_sendString>
	   USART_sendWord( USART1_NUM , '\n' );
 8000b6a:	210a      	movs	r1, #10
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 fce5 	bl	800153c <USART_sendWord>
	   delay_ms(5);
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	e002      	b.n	8000b7e <APP_send_data+0x4a>
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	f641 220a 	movw	r2, #6666	; 0x1a0a
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d9f7      	bls.n	8000b78 <APP_send_data+0x44>
	for(u16 i=0; i <a_size ; i++)
 8000b88:	8bfb      	ldrh	r3, [r7, #30]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	83fb      	strh	r3, [r7, #30]
 8000b8e:	8bfa      	ldrh	r2, [r7, #30]
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3d7      	bcc.n	8000b46 <APP_send_data+0x12>
	}


}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <GPIO_voidPinMode>:

}


void GPIO_voidPinMode( PORT_ID Port_ID , PIN_ID PinNum , MODE mode )
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
 8000baa:	460b      	mov	r3, r1
 8000bac:	71bb      	strb	r3, [r7, #6]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d81a      	bhi.n	8000bee <GPIO_voidPinMode+0x4e>
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	2b10      	cmp	r3, #16
 8000bbc:	d817      	bhi.n	8000bee <GPIO_voidPinMode+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->MODER) = ( (GPIO_PORT[Port_ID]->MODER) & (~(0b11 << 2*PinNum)) ) | ( mode << 2*PinNum );
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <GPIO_voidPinMode+0x5c>)
 8000bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	79ba      	ldrb	r2, [r7, #6]
 8000bca:	0052      	lsls	r2, r2, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	43d2      	mvns	r2, r2
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	7979      	ldrb	r1, [r7, #5]
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4905      	ldr	r1, [pc, #20]	; (8000bfc <GPIO_voidPinMode+0x5c>)
 8000be6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bea:	4302      	orrs	r2, r0
 8000bec:	601a      	str	r2, [r3, #0]
	}

}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000

08000c00 <GPIO_voidPinOutputMode>:

	return value;
}

void GPIO_voidPinOutputMode(  PORT_ID Port_ID , PIN_ID PinNum , OUTPUT_MODE mode )
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	71bb      	strb	r3, [r7, #6]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d812      	bhi.n	8000c3e <GPIO_voidPinOutputMode+0x3e>
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b10      	cmp	r3, #16
 8000c1c:	d80f      	bhi.n	8000c3e <GPIO_voidPinOutputMode+0x3e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->OTYPER) = (GPIO_PORT[Port_ID]->OTYPER) | (mode << PinNum) ;
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <GPIO_voidPinOutputMode+0x4c>)
 8000c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	7979      	ldrb	r1, [r7, #5]
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	4618      	mov	r0, r3
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4905      	ldr	r1, [pc, #20]	; (8000c4c <GPIO_voidPinOutputMode+0x4c>)
 8000c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c3a:	4302      	orrs	r2, r0
 8000c3c:	605a      	str	r2, [r3, #4]
	}

}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <GPIO_voidOutputSpeed>:

void GPIO_voidOutputSpeed( PORT_ID Port_ID , PIN_ID PinNum , OUTPUT_SPEED speed )
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71bb      	strb	r3, [r7, #6]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d81a      	bhi.n	8000c9e <GPIO_voidOutputSpeed+0x4e>
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2b10      	cmp	r3, #16
 8000c6c:	d817      	bhi.n	8000c9e <GPIO_voidOutputSpeed+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->OSPEEDR) = ( (GPIO_PORT[Port_ID]->OSPEEDR) & (~(0b11 << 2*PinNum)) ) | ( speed << 2*PinNum );
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <GPIO_voidOutputSpeed+0x5c>)
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	79ba      	ldrb	r2, [r7, #6]
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	43d2      	mvns	r2, r2
 8000c84:	401a      	ands	r2, r3
 8000c86:	7979      	ldrb	r1, [r7, #5]
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4905      	ldr	r1, [pc, #20]	; (8000cac <GPIO_voidOutputSpeed+0x5c>)
 8000c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c9a:	4302      	orrs	r2, r0
 8000c9c:	609a      	str	r2, [r3, #8]
	}

}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000000 	.word	0x20000000

08000cb0 <GPIO_void_PullType>:

void GPIO_void_PullType( PORT_ID Port_ID , PIN_ID PinNum , PULL_TYPE Pull_type )
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
	if( Port_ID > MAX_PORTS_NUMBER  || PinNum > MAX_PINS_NUMBER )
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d81a      	bhi.n	8000cfe <GPIO_void_PullType+0x4e>
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d817      	bhi.n	8000cfe <GPIO_void_PullType+0x4e>
	{
		/* Do nothing */
	}else
	{
		(GPIO_PORT[Port_ID]->PUPDR) = ( (GPIO_PORT[Port_ID]->PUPDR) & (~(0b11 << 2*PinNum)) ) | ( Pull_type << 2*PinNum );
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <GPIO_void_PullType+0x5c>)
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	79ba      	ldrb	r2, [r7, #6]
 8000cda:	0052      	lsls	r2, r2, #1
 8000cdc:	2103      	movs	r1, #3
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	43d2      	mvns	r2, r2
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	7979      	ldrb	r1, [r7, #5]
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4905      	ldr	r1, [pc, #20]	; (8000d0c <GPIO_void_PullType+0x5c>)
 8000cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	60da      	str	r2, [r3, #12]
	}

}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000000 	.word	0x20000000

08000d10 <GPIO_setAlternativeFunction>:
	return value;

}

void GPIO_setAlternativeFunction( PORT_ID port_id , PIN_ID pin_id , ALTERNATIVE_FUNCTION altternative_fun )
{
 8000d10:	b490      	push	{r4, r7}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	717b      	strb	r3, [r7, #5]
	if( port_id > MAX_PORTS_NUMBER  || pin_id > MAX_PINS_NUMBER )
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d82b      	bhi.n	8000d80 <GPIO_setAlternativeFunction+0x70>
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d828      	bhi.n	8000d80 <GPIO_setAlternativeFunction+0x70>
	{
		/* Do nothing */
	}else
	{
		u8 bit_num = (pin_id % 8U)*4U ;
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	f003 0307 	and.w	r3, r3, #7
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	73fb      	strb	r3, [r7, #15]
		(GPIO_PORT[port_id]->AFR[pin_id/8U]) = ( (GPIO_PORT[port_id]->AFR[pin_id/8U]) & ( ~( (0b1111) << (bit_num) ) ) ) | ( (altternative_fun) <<  (bit_num) ) ;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <GPIO_setAlternativeFunction+0x7c>)
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	79ba      	ldrb	r2, [r7, #6]
 8000d44:	08d2      	lsrs	r2, r2, #3
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	3208      	adds	r2, #8
 8000d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	210f      	movs	r1, #15
 8000d52:	fa01 f202 	lsl.w	r2, r1, r2
 8000d56:	43d2      	mvns	r2, r2
 8000d58:	401a      	ands	r2, r3
 8000d5a:	7979      	ldrb	r1, [r7, #5]
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	461c      	mov	r4, r3
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	4909      	ldr	r1, [pc, #36]	; (8000d8c <GPIO_setAlternativeFunction+0x7c>)
 8000d68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d6c:	79b9      	ldrb	r1, [r7, #6]
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	b2c9      	uxtb	r1, r1
 8000d72:	4608      	mov	r0, r1
 8000d74:	ea42 0104 	orr.w	r1, r2, r4
 8000d78:	f100 0208 	add.w	r2, r0, #8
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc90      	pop	{r4, r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000

08000d90 <GPIO_voidInti>:
 * @brief This function initialize GPIO pin according
 * @param[in] pin_config : A struct contains the initialization values
 * @retval void
 *********************************************************************************/
void GPIO_voidInti( const GPIO_PIN_CONFIG_T *pin_config )
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	PORT_ID port_id  = pin_config->port_id;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	73fb      	strb	r3, [r7, #15]
	PIN_ID pin_id    = pin_config->pin_id;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	785b      	ldrb	r3, [r3, #1]
 8000da2:	73bb      	strb	r3, [r7, #14]

	/* Pin Mode */
	GPIO_voidPinMode( port_id , pin_id ,pin_config->mode );
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	789a      	ldrb	r2, [r3, #2]
 8000da8:	7bb9      	ldrb	r1, [r7, #14]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fef7 	bl	8000ba0 <GPIO_voidPinMode>

	/* Pull type */
	GPIO_void_PullType( port_id , pin_id , pin_config->pull_type );
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	78da      	ldrb	r2, [r3, #3]
 8000db6:	7bb9      	ldrb	r1, [r7, #14]
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff78 	bl	8000cb0 <GPIO_void_PullType>

	if( (pin_config->mode) == GPIO_INPUT || (pin_config->mode) == GPIO_ANALOG_MODE ) /* Input or Analog */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d02f      	beq.n	8000e28 <GPIO_voidInti+0x98>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d02b      	beq.n	8000e28 <GPIO_voidInti+0x98>
	{

		/* DO NOTHING */

	}else if( (pin_config->mode) == GPIO_OUTPUT ) /* Output */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d10e      	bne.n	8000df6 <GPIO_voidInti+0x66>
	{
		/* Output mode */
		GPIO_voidPinOutputMode(  port_id , pin_id , pin_config->out_mode );
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	791a      	ldrb	r2, [r3, #4]
 8000ddc:	7bb9      	ldrb	r1, [r7, #14]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff0d 	bl	8000c00 <GPIO_voidPinOutputMode>

		/* Output speed */
		GPIO_voidOutputSpeed(  port_id , pin_id , pin_config->out_speed );
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	795a      	ldrb	r2, [r3, #5]
 8000dea:	7bb9      	ldrb	r1, [r7, #14]
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff2e 	bl	8000c50 <GPIO_voidOutputSpeed>

		/* ALlternative fun */
		GPIO_setAlternativeFunction(port_id , pin_id , pin_config->alternative_fun );
	}

}
 8000df4:	e018      	b.n	8000e28 <GPIO_voidInti+0x98>
	}else if( (pin_config->mode) == GPIO_ALTERNATIVE_FUNCTION )  /* Alternative function */
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d114      	bne.n	8000e28 <GPIO_voidInti+0x98>
		GPIO_voidPinOutputMode(  port_id , pin_id , pin_config->out_mode );
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	791a      	ldrb	r2, [r3, #4]
 8000e02:	7bb9      	ldrb	r1, [r7, #14]
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fefa 	bl	8000c00 <GPIO_voidPinOutputMode>
		GPIO_voidOutputSpeed(  port_id , pin_id , pin_config->out_speed );
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	795a      	ldrb	r2, [r3, #5]
 8000e10:	7bb9      	ldrb	r1, [r7, #14]
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff1b 	bl	8000c50 <GPIO_voidOutputSpeed>
		GPIO_setAlternativeFunction(port_id , pin_id , pin_config->alternative_fun );
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	799a      	ldrb	r2, [r3, #6]
 8000e1e:	7bb9      	ldrb	r1, [r7, #14]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff74 	bl	8000d10 <GPIO_setAlternativeFunction>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <RCC_voidInitSysCls>:
/* Parameters in  :    void                                                      */
/* Parameters out :    void                                                      */
/* Description    :    This function init the RCC module                        */
/*********************************************************************************/
void RCC_voidInitSysCls(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

#if RCC_CLK_SRC == HSI  /* Internal clock */

	/* choose system clock */
	CLEAR_BIT(RCC_CFGR,SW0);
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <RCC_voidInitSysCls+0x4c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <RCC_voidInitSysCls+0x4c>)
 8000e3a:	f023 0301 	bic.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC_CFGR,SW1);
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <RCC_voidInitSysCls+0x4c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <RCC_voidInitSysCls+0x4c>)
 8000e46:	f023 0302 	bic.w	r3, r3, #2
 8000e4a:	6013      	str	r3, [r2, #0]

	CLEAR_BIT(RCC_CR , HSEON );
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <RCC_voidInitSysCls+0x50>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <RCC_voidInitSysCls+0x50>)
 8000e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e56:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(RCC_CR , PLLON );
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <RCC_voidInitSysCls+0x50>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <RCC_voidInitSysCls+0x50>)
 8000e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e62:	6013      	str	r3, [r2, #0]
	SET_BIT(  RCC_CR , HSION );
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <RCC_voidInitSysCls+0x50>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <RCC_voidInitSysCls+0x50>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]

#else
#error "Not suitable clock selected in init"
#endif

}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023808 	.word	0x40023808
 8000e80:	40023800 	.word	0x40023800

08000e84 <RCC_voidEnablePerpheralClk>:
/* Parameters in  :    BusID , PerpheralId                                       */
/* Parameters out :    void                                                      */
/* Description    :    This function enable the perpheral clock                  */
/*********************************************************************************/
void RCC_voidEnablePerpheralClk(u8 BusId , u8 PerpheralId )
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
	if( BusId > MAX_BUSE_NUMBER || PerpheralId > MAX_PERIPHERAL_PER_BUS )
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d83c      	bhi.n	8000f14 <RCC_voidEnablePerpheralClk+0x90>
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	d839      	bhi.n	8000f14 <RCC_voidEnablePerpheralClk+0x90>
	{
		/* Do nothing */
	}else
	{
		switch( BusId )
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d836      	bhi.n	8000f14 <RCC_voidEnablePerpheralClk+0x90>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <RCC_voidEnablePerpheralClk+0x28>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ed3 	.word	0x08000ed3
 8000eb4:	08000ee9 	.word	0x08000ee9
 8000eb8:	08000eff 	.word	0x08000eff
		{
		case AHB1:

			SET_BIT( RCC_AHB1ENR , PerpheralId );
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <RCC_voidEnablePerpheralClk+0x9c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <RCC_voidEnablePerpheralClk+0x9c>)
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6013      	str	r3, [r2, #0]
			break;
 8000ed0:	e020      	b.n	8000f14 <RCC_voidEnablePerpheralClk+0x90>
		case AHB2:
			SET_BIT( RCC_AHB2ENR , PerpheralId );
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <RCC_voidEnablePerpheralClk+0xa0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	79ba      	ldrb	r2, [r7, #6]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <RCC_voidEnablePerpheralClk+0xa0>)
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]
			break;
 8000ee6:	e015      	b.n	8000f14 <RCC_voidEnablePerpheralClk+0x90>
		case APB1:
			SET_BIT( RCC_APB1ENR , PerpheralId );
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <RCC_voidEnablePerpheralClk+0xa4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	79ba      	ldrb	r2, [r7, #6]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <RCC_voidEnablePerpheralClk+0xa4>)
 8000ef8:	430b      	orrs	r3, r1
 8000efa:	6013      	str	r3, [r2, #0]
			break;
 8000efc:	e00a      	b.n	8000f14 <RCC_voidEnablePerpheralClk+0x90>
		case APB2:
			SET_BIT( RCC_APB2ENR , PerpheralId );
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <RCC_voidEnablePerpheralClk+0xa8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <RCC_voidEnablePerpheralClk+0xa8>)
 8000f0e:	430b      	orrs	r3, r1
 8000f10:	6013      	str	r3, [r2, #0]
			break;
 8000f12:	bf00      	nop

		}
	}

}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40023830 	.word	0x40023830
 8000f24:	40023834 	.word	0x40023834
 8000f28:	40023840 	.word	0x40023840
 8000f2c:	40023844 	.word	0x40023844

08000f30 <SYSTICK_voidInit>:

static volatile void (*g_callBackFun) (void) = NULL;
s32 g_state;

void SYSTICK_voidInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

#if ( SYSTICK_CLOCK == AHB_DIV_8 )
	CLEAR_BIT( STK_CTRL , CLKSOURCE );
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SYSTICK_voidInit+0x1c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <SYSTICK_voidInit+0x1c>)
 8000f3a:	f023 0304 	bic.w	r3, r3, #4
 8000f3e:	6013      	str	r3, [r2, #0]
#else
	SET_BIT( STK_CTRL , CLKSOURCE );
#endif


}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <SYSTICK_voidDisable>:

void SYSTICK_voidDisable(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	CLEAR_BIT( STK_CTRL , ENABLE );  /* Disable timer */
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <SYSTICK_voidDisable+0x34>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SYSTICK_voidDisable+0x34>)
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
	CLEAR_BIT( STK_CTRL , TICKINT ); /* Disable exception  */
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <SYSTICK_voidDisable+0x34>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <SYSTICK_voidDisable+0x34>)
 8000f66:	f023 0302 	bic.w	r3, r3, #2
 8000f6a:	6013      	str	r3, [r2, #0]
	STK_VAL  = 0; /* Make it count from zero */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SYSTICK_voidDisable+0x38>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
	STK_LOAD = 0;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SYSTICK_voidDisable+0x3c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010
 8000f88:	e000e018 	.word	0xe000e018
 8000f8c:	e000e014 	.word	0xe000e014

08000f90 <SYSTICK_voidSetIntervalNumber>:
	SET_BIT( STK_CTRL , TICKINT );  /* Open exception */
	SET_BIT( STK_CTRL , ENABLE ); /* Enable timer */
}

void SYSTICK_voidSetIntervalNumber( u32 a_number_of_delay_ticks , s32 a_number_of_intervals , void (*a_callBackFun)(void) )
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	STK_LOAD = a_number_of_delay_ticks; /* Put the number of ticks in reload value */
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <SYSTICK_voidSetIntervalNumber+0x44>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6013      	str	r3, [r2, #0]
	g_callBackFun = a_callBackFun;  /* Put call back function */
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <SYSTICK_voidSetIntervalNumber+0x48>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6013      	str	r3, [r2, #0]
	g_state = a_number_of_intervals ;
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <SYSTICK_voidSetIntervalNumber+0x4c>)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	6013      	str	r3, [r2, #0]
	SET_BIT( STK_CTRL , TICKINT );  /* Open exception */
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <SYSTICK_voidSetIntervalNumber+0x50>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <SYSTICK_voidSetIntervalNumber+0x50>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6013      	str	r3, [r2, #0]
	SET_BIT( STK_CTRL , ENABLE );   /* Enable timer */
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <SYSTICK_voidSetIntervalNumber+0x50>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <SYSTICK_voidSetIntervalNumber+0x50>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e014 	.word	0xe000e014
 8000fd8:	20000028 	.word	0x20000028
 8000fdc:	2000002c 	.word	0x2000002c
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <SysTick_Handler>:
}


/* ISR of SYSTICK */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	if( g_callBackFun != NULL )
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <SysTick_Handler+0x44>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d019      	beq.n	8001024 <SysTick_Handler+0x40>
	{
		if( g_state == 1 )
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <SysTick_Handler+0x48>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d105      	bne.n	8001004 <SysTick_Handler+0x20>
		{
			SYSTICK_voidDisable(); /* Disable timer */
 8000ff8:	f7ff ffaa 	bl	8000f50 <SYSTICK_voidDisable>
			g_callBackFun();
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <SysTick_Handler+0x44>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4798      	blx	r3
		{
			g_callBackFun();
		}
	}

}
 8001002:	e00f      	b.n	8001024 <SysTick_Handler+0x40>
		}else if( g_state > 1 )
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <SysTick_Handler+0x48>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	dd08      	ble.n	800101e <SysTick_Handler+0x3a>
			g_callBackFun();
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SysTick_Handler+0x44>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4798      	blx	r3
			g_state--;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <SysTick_Handler+0x48>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	3b01      	subs	r3, #1
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <SysTick_Handler+0x48>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	e002      	b.n	8001024 <SysTick_Handler+0x40>
			g_callBackFun();
 800101e:	4b02      	ldr	r3, [pc, #8]	; (8001028 <SysTick_Handler+0x44>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4798      	blx	r3
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000028 	.word	0x20000028
 800102c:	2000002c 	.word	0x2000002c

08001030 <USART_voidInit>:
#include "USART_config.h"
#include "RCC_interface.h"
#include "GPIO_interface.h"

void USART_voidInit( USART_config *a_config )
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	u16 mantisa , div;
	switch( a_config->usart_numb )
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	f000 81a3 	beq.w	8001388 <USART_voidInit+0x358>
 8001042:	2b02      	cmp	r3, #2
 8001044:	f300 8265 	bgt.w	8001512 <USART_voidInit+0x4e2>
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <USART_voidInit+0x24>
 800104c:	2b01      	cmp	r3, #1
 800104e:	f000 80c6 	beq.w	80011de <USART_voidInit+0x1ae>

		break;

	}

}
 8001052:	e25e      	b.n	8001512 <USART_voidInit+0x4e2>
		RCC_voidEnablePerpheralClk( APB2 ,  USART1_ID );
 8001054:	2104      	movs	r1, #4
 8001056:	2003      	movs	r0, #3
 8001058:	f7ff ff14 	bl	8000e84 <RCC_voidEnablePerpheralClk>
		RCC_voidEnablePerpheralClk(AHB1 , GPIOA_ID);
 800105c:	2100      	movs	r1, #0
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ff10 	bl	8000e84 <RCC_voidEnablePerpheralClk>
		GPIO_PIN_CONFIG_T gpio_cofig = { PORTA_ID , PIN9_ID , GPIO_ALTERNATIVE_FUNCTION , NO_PULL , NONE , NONE , AF7 };
 8001064:	4a8e      	ldr	r2, [pc, #568]	; (80012a0 <USART_voidInit+0x270>)
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800106e:	6018      	str	r0, [r3, #0]
 8001070:	3304      	adds	r3, #4
 8001072:	8019      	strh	r1, [r3, #0]
 8001074:	3302      	adds	r3, #2
 8001076:	0c0a      	lsrs	r2, r1, #16
 8001078:	701a      	strb	r2, [r3, #0]
		GPIO_voidInti( &gpio_cofig ); /* For TX pin (PIN 9) */
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fe86 	bl	8000d90 <GPIO_voidInti>
		gpio_cofig.pin_id = PIN10_ID;
 8001084:	230a      	movs	r3, #10
 8001086:	777b      	strb	r3, [r7, #29]
		GPIO_voidInti( &gpio_cofig ); /* For RX pin (PIN 10) */
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fe7f 	bl	8000d90 <GPIO_voidInti>
		PUT_VALUE_IN_BIT( USART1->USART_CR1 , 15 , a_config->over_sampling );
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <USART_voidInit+0x78>
 800109a:	4b82      	ldr	r3, [pc, #520]	; (80012a4 <USART_voidInit+0x274>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4a81      	ldr	r2, [pc, #516]	; (80012a4 <USART_voidInit+0x274>)
 80010a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010a4:	60d3      	str	r3, [r2, #12]
 80010a6:	e005      	b.n	80010b4 <USART_voidInit+0x84>
 80010a8:	4b7e      	ldr	r3, [pc, #504]	; (80012a4 <USART_voidInit+0x274>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a7d      	ldr	r2, [pc, #500]	; (80012a4 <USART_voidInit+0x274>)
 80010ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b2:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART1->USART_CR1 , 12 , a_config->word_size );
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	78db      	ldrb	r3, [r3, #3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <USART_voidInit+0x9a>
 80010bc:	4b79      	ldr	r3, [pc, #484]	; (80012a4 <USART_voidInit+0x274>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4a78      	ldr	r2, [pc, #480]	; (80012a4 <USART_voidInit+0x274>)
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c6:	60d3      	str	r3, [r2, #12]
 80010c8:	e005      	b.n	80010d6 <USART_voidInit+0xa6>
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <USART_voidInit+0x274>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	4a75      	ldr	r2, [pc, #468]	; (80012a4 <USART_voidInit+0x274>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d4:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART1->USART_CR1 , 10 , a_config->parity_bit ); /* Enable or Disable parity bit */
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d106      	bne.n	80010ec <USART_voidInit+0xbc>
 80010de:	4b71      	ldr	r3, [pc, #452]	; (80012a4 <USART_voidInit+0x274>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	4a70      	ldr	r2, [pc, #448]	; (80012a4 <USART_voidInit+0x274>)
 80010e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010e8:	60d3      	str	r3, [r2, #12]
 80010ea:	e005      	b.n	80010f8 <USART_voidInit+0xc8>
 80010ec:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <USART_voidInit+0x274>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a6c      	ldr	r2, [pc, #432]	; (80012a4 <USART_voidInit+0x274>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART1->USART_CR1 , 9  , a_config->parity_bit ); /* EVEN OR ODD */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d106      	bne.n	800110e <USART_voidInit+0xde>
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <USART_voidInit+0x274>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4a67      	ldr	r2, [pc, #412]	; (80012a4 <USART_voidInit+0x274>)
 8001106:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800110a:	60d3      	str	r3, [r2, #12]
 800110c:	e005      	b.n	800111a <USART_voidInit+0xea>
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <USART_voidInit+0x274>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	4a64      	ldr	r2, [pc, #400]	; (80012a4 <USART_voidInit+0x274>)
 8001114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001118:	60d3      	str	r3, [r2, #12]
		USART1->USART_CR2 = ( (USART1->USART_CR2)&(0xFFFFCFFF) ) | ( (a_config->stop_bit)<<12 ); /* Stop bit */
 800111a:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <USART_voidInit+0x274>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	7852      	ldrb	r2, [r2, #1]
 8001126:	0312      	lsls	r2, r2, #12
 8001128:	4611      	mov	r1, r2
 800112a:	4a5e      	ldr	r2, [pc, #376]	; (80012a4 <USART_voidInit+0x274>)
 800112c:	430b      	orrs	r3, r1
 800112e:	6113      	str	r3, [r2, #16]
		mantisa = ( (F_CK / (a_config->baudrate * 16)) );
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4a5c      	ldr	r2, [pc, #368]	; (80012a8 <USART_voidInit+0x278>)
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	84fb      	strh	r3, [r7, #38]	; 0x26
		div = ( ( (F_CK / (a_config->baudrate * 16.0)) )*1.0 - mantisa*1.0 ) * 16;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f98a 	bl	800045c <__aeabi_ui2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b57      	ldr	r3, [pc, #348]	; (80012ac <USART_voidInit+0x27c>)
 800114e:	f7ff f9ff 	bl	8000550 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	a150      	add	r1, pc, #320	; (adr r1, 8001298 <USART_voidInit+0x268>)
 8001158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800115c:	f7ff fb22 	bl	80007a4 <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4614      	mov	r4, r2
 8001166:	461d      	mov	r5, r3
 8001168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f986 	bl	800047c <__aeabi_i2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff f832 	bl	80001e0 <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <USART_voidInit+0x27c>)
 800118a:	f7ff f9e1 	bl	8000550 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fbed 	bl	8000974 <__aeabi_d2uiz>
 800119a:	4603      	mov	r3, r0
 800119c:	84bb      	strh	r3, [r7, #36]	; 0x24
		USART1->USART_BRR = div ;
 800119e:	4a41      	ldr	r2, [pc, #260]	; (80012a4 <USART_voidInit+0x274>)
 80011a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011a2:	6093      	str	r3, [r2, #8]
		USART1->USART_BRR = ( (USART1->USART_BRR)&0x000F ) | ( mantisa << 4 ) ;
 80011a4:	4b3f      	ldr	r3, [pc, #252]	; (80012a4 <USART_voidInit+0x274>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	4611      	mov	r1, r2
 80011b2:	4a3c      	ldr	r2, [pc, #240]	; (80012a4 <USART_voidInit+0x274>)
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6093      	str	r3, [r2, #8]
		SET_BIT( USART1->USART_CR1 , 3 ); /* EANBLE Transmitter */
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <USART_voidInit+0x274>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4a39      	ldr	r2, [pc, #228]	; (80012a4 <USART_voidInit+0x274>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	60d3      	str	r3, [r2, #12]
		SET_BIT( USART1->USART_CR1 , 2 ); /* EANBLE Receiver */
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <USART_voidInit+0x274>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <USART_voidInit+0x274>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	60d3      	str	r3, [r2, #12]
		SET_BIT( USART1->USART_CR1 , 13 ); /* EANBLE USART */
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <USART_voidInit+0x274>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4a33      	ldr	r2, [pc, #204]	; (80012a4 <USART_voidInit+0x274>)
 80011d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011da:	60d3      	str	r3, [r2, #12]
		break;
 80011dc:	e199      	b.n	8001512 <USART_voidInit+0x4e2>
		RCC_voidEnablePerpheralClk( APB1 ,  USART2_ID );
 80011de:	2111      	movs	r1, #17
 80011e0:	2002      	movs	r0, #2
 80011e2:	f7ff fe4f 	bl	8000e84 <RCC_voidEnablePerpheralClk>
		RCC_voidEnablePerpheralClk( AHB1 , GPIOA_ID);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fe4b 	bl	8000e84 <RCC_voidEnablePerpheralClk>
		GPIO_PIN_CONFIG_T gpio_cofig2 = { PORTA_ID , PIN2_ID , GPIO_ALTERNATIVE_FUNCTION , NO_PULL , NONE , NONE , AF7 };
 80011ee:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <USART_voidInit+0x280>)
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f8:	6018      	str	r0, [r3, #0]
 80011fa:	3304      	adds	r3, #4
 80011fc:	8019      	strh	r1, [r3, #0]
 80011fe:	3302      	adds	r3, #2
 8001200:	0c0a      	lsrs	r2, r1, #16
 8001202:	701a      	strb	r2, [r3, #0]
		GPIO_voidInti( &gpio_cofig2 ); /* For TX pin (PIN 9) */
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fdc1 	bl	8000d90 <GPIO_voidInti>
		gpio_cofig2.pin_id = PIN3_ID;
 800120e:	2303      	movs	r3, #3
 8001210:	757b      	strb	r3, [r7, #21]
		GPIO_voidInti( &gpio_cofig2 ); /* For RX pin (PIN 10) */
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fdba 	bl	8000d90 <GPIO_voidInti>
		PUT_VALUE_IN_BIT( USART2->USART_CR1 , 15 , a_config->over_sampling );
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	791b      	ldrb	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <USART_voidInit+0x202>
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <USART_voidInit+0x284>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <USART_voidInit+0x284>)
 800122a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800122e:	60d3      	str	r3, [r2, #12]
 8001230:	e005      	b.n	800123e <USART_voidInit+0x20e>
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <USART_voidInit+0x284>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <USART_voidInit+0x284>)
 8001238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123c:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART2->USART_CR1 , 12 , a_config->word_size );
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	78db      	ldrb	r3, [r3, #3]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <USART_voidInit+0x224>
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <USART_voidInit+0x284>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	4a1a      	ldr	r2, [pc, #104]	; (80012b4 <USART_voidInit+0x284>)
 800124c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001250:	60d3      	str	r3, [r2, #12]
 8001252:	e005      	b.n	8001260 <USART_voidInit+0x230>
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <USART_voidInit+0x284>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <USART_voidInit+0x284>)
 800125a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800125e:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART2->USART_CR1 , 10 , a_config->parity_bit ); /* Enable or Disable parity bit */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d106      	bne.n	8001276 <USART_voidInit+0x246>
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <USART_voidInit+0x284>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <USART_voidInit+0x284>)
 800126e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001272:	60d3      	str	r3, [r2, #12]
 8001274:	e005      	b.n	8001282 <USART_voidInit+0x252>
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <USART_voidInit+0x284>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <USART_voidInit+0x284>)
 800127c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001280:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART2->USART_CR1 , 9  , a_config->parity_bit ); /* EVEN OR ODD */
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	789b      	ldrb	r3, [r3, #2]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <USART_voidInit+0x288>
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <USART_voidInit+0x284>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <USART_voidInit+0x284>)
 8001290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001294:	60d3      	str	r3, [r2, #12]
 8001296:	e015      	b.n	80012c4 <USART_voidInit+0x294>
 8001298:	00000000 	.word	0x00000000
 800129c:	416e8480 	.word	0x416e8480
 80012a0:	0800191c 	.word	0x0800191c
 80012a4:	40011000 	.word	0x40011000
 80012a8:	00f42400 	.word	0x00f42400
 80012ac:	40300000 	.word	0x40300000
 80012b0:	08001924 	.word	0x08001924
 80012b4:	40004400 	.word	0x40004400
 80012b8:	4b9b      	ldr	r3, [pc, #620]	; (8001528 <USART_voidInit+0x4f8>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a9a      	ldr	r2, [pc, #616]	; (8001528 <USART_voidInit+0x4f8>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	60d3      	str	r3, [r2, #12]
		USART2->USART_CR2 = ( (USART2->USART_CR2)&(0xFFFFCFFF) ) | ( (a_config->stop_bit)<<12 ); /* Stop bit */
 80012c4:	4b98      	ldr	r3, [pc, #608]	; (8001528 <USART_voidInit+0x4f8>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	7852      	ldrb	r2, [r2, #1]
 80012d0:	0312      	lsls	r2, r2, #12
 80012d2:	4611      	mov	r1, r2
 80012d4:	4a94      	ldr	r2, [pc, #592]	; (8001528 <USART_voidInit+0x4f8>)
 80012d6:	430b      	orrs	r3, r1
 80012d8:	6113      	str	r3, [r2, #16]
		mantisa = ( (F_CK / (a_config->baudrate * 16)) );
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4a92      	ldr	r2, [pc, #584]	; (800152c <USART_voidInit+0x4fc>)
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	84fb      	strh	r3, [r7, #38]	; 0x26
		div = ( ( (F_CK / (a_config->baudrate * 16.0)) )*1.0 - mantisa*1.0 ) * 16;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f8b5 	bl	800045c <__aeabi_ui2d>
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b8e      	ldr	r3, [pc, #568]	; (8001530 <USART_voidInit+0x500>)
 80012f8:	f7ff f92a 	bl	8000550 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	a187      	add	r1, pc, #540	; (adr r1, 8001520 <USART_voidInit+0x4f0>)
 8001302:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001306:	f7ff fa4d 	bl	80007a4 <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4614      	mov	r4, r2
 8001310:	461d      	mov	r5, r3
 8001312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8b1 	bl	800047c <__aeabi_i2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ff5d 	bl	80001e0 <__aeabi_dsub>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b7f      	ldr	r3, [pc, #508]	; (8001530 <USART_voidInit+0x500>)
 8001334:	f7ff f90c 	bl	8000550 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f7ff fb18 	bl	8000974 <__aeabi_d2uiz>
 8001344:	4603      	mov	r3, r0
 8001346:	84bb      	strh	r3, [r7, #36]	; 0x24
		USART2->USART_BRR = div ;
 8001348:	4a77      	ldr	r2, [pc, #476]	; (8001528 <USART_voidInit+0x4f8>)
 800134a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800134c:	6093      	str	r3, [r2, #8]
		USART2->USART_BRR = ( (USART2->USART_BRR)&0x000F ) | ( mantisa << 4 ) ;
 800134e:	4b76      	ldr	r3, [pc, #472]	; (8001528 <USART_voidInit+0x4f8>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	4611      	mov	r1, r2
 800135c:	4a72      	ldr	r2, [pc, #456]	; (8001528 <USART_voidInit+0x4f8>)
 800135e:	430b      	orrs	r3, r1
 8001360:	6093      	str	r3, [r2, #8]
		SET_BIT( USART2->USART_CR1 , 3 ); /* EANBLE Transmitter */
 8001362:	4b71      	ldr	r3, [pc, #452]	; (8001528 <USART_voidInit+0x4f8>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a70      	ldr	r2, [pc, #448]	; (8001528 <USART_voidInit+0x4f8>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	60d3      	str	r3, [r2, #12]
		SET_BIT( USART2->USART_CR1 , 2 ); /* EANBLE Receiver */
 800136e:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <USART_voidInit+0x4f8>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	4a6d      	ldr	r2, [pc, #436]	; (8001528 <USART_voidInit+0x4f8>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	60d3      	str	r3, [r2, #12]
		SET_BIT( USART2->USART_CR1 , 13 ); /* EANBLE USART */
 800137a:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <USART_voidInit+0x4f8>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a6a      	ldr	r2, [pc, #424]	; (8001528 <USART_voidInit+0x4f8>)
 8001380:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001384:	60d3      	str	r3, [r2, #12]
		break;
 8001386:	e0c4      	b.n	8001512 <USART_voidInit+0x4e2>
		RCC_voidEnablePerpheralClk( APB2 ,  USART6_ID );
 8001388:	2105      	movs	r1, #5
 800138a:	2003      	movs	r0, #3
 800138c:	f7ff fd7a 	bl	8000e84 <RCC_voidEnablePerpheralClk>
		RCC_voidEnablePerpheralClk( AHB1 , GPIOA_ID);
 8001390:	2100      	movs	r1, #0
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff fd76 	bl	8000e84 <RCC_voidEnablePerpheralClk>
		GPIO_PIN_CONFIG_T gpio_cofig3 = { PORTA_ID , PIN11_ID , GPIO_ALTERNATIVE_FUNCTION , NO_PULL , NONE , NONE , AF8 };
 8001398:	4a66      	ldr	r2, [pc, #408]	; (8001534 <USART_voidInit+0x504>)
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a2:	6018      	str	r0, [r3, #0]
 80013a4:	3304      	adds	r3, #4
 80013a6:	8019      	strh	r1, [r3, #0]
 80013a8:	3302      	adds	r3, #2
 80013aa:	0c0a      	lsrs	r2, r1, #16
 80013ac:	701a      	strb	r2, [r3, #0]
		GPIO_voidInti( &gpio_cofig3 ); /* For TX pin (PIN 9) */
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fcec 	bl	8000d90 <GPIO_voidInti>
		gpio_cofig3.pin_id = PIN12_ID;
 80013b8:	230c      	movs	r3, #12
 80013ba:	737b      	strb	r3, [r7, #13]
		GPIO_voidInti( &gpio_cofig3 ); /* For RX pin (PIN 10) */
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fce5 	bl	8000d90 <GPIO_voidInti>
		PUT_VALUE_IN_BIT( USART6->USART_CR1 , 15 , a_config->over_sampling );
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	791b      	ldrb	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d106      	bne.n	80013dc <USART_voidInit+0x3ac>
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <USART_voidInit+0x508>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a59      	ldr	r2, [pc, #356]	; (8001538 <USART_voidInit+0x508>)
 80013d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013d8:	60d3      	str	r3, [r2, #12]
 80013da:	e005      	b.n	80013e8 <USART_voidInit+0x3b8>
 80013dc:	4b56      	ldr	r3, [pc, #344]	; (8001538 <USART_voidInit+0x508>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a55      	ldr	r2, [pc, #340]	; (8001538 <USART_voidInit+0x508>)
 80013e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e6:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART6->USART_CR1 , 12 , a_config->word_size );
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d106      	bne.n	80013fe <USART_voidInit+0x3ce>
 80013f0:	4b51      	ldr	r3, [pc, #324]	; (8001538 <USART_voidInit+0x508>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4a50      	ldr	r2, [pc, #320]	; (8001538 <USART_voidInit+0x508>)
 80013f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013fa:	60d3      	str	r3, [r2, #12]
 80013fc:	e005      	b.n	800140a <USART_voidInit+0x3da>
 80013fe:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <USART_voidInit+0x508>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <USART_voidInit+0x508>)
 8001404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001408:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART6->USART_CR1 , 10 , a_config->parity_bit ); /* Enable or Disable parity bit */
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	789b      	ldrb	r3, [r3, #2]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <USART_voidInit+0x3f0>
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <USART_voidInit+0x508>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <USART_voidInit+0x508>)
 8001418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800141c:	60d3      	str	r3, [r2, #12]
 800141e:	e005      	b.n	800142c <USART_voidInit+0x3fc>
 8001420:	4b45      	ldr	r3, [pc, #276]	; (8001538 <USART_voidInit+0x508>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a44      	ldr	r2, [pc, #272]	; (8001538 <USART_voidInit+0x508>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	60d3      	str	r3, [r2, #12]
		PUT_VALUE_IN_BIT( USART6->USART_CR1 , 9  , a_config->parity_bit ); /* EVEN OR ODD */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d106      	bne.n	8001442 <USART_voidInit+0x412>
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <USART_voidInit+0x508>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <USART_voidInit+0x508>)
 800143a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800143e:	60d3      	str	r3, [r2, #12]
 8001440:	e005      	b.n	800144e <USART_voidInit+0x41e>
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <USART_voidInit+0x508>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	4a3c      	ldr	r2, [pc, #240]	; (8001538 <USART_voidInit+0x508>)
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	60d3      	str	r3, [r2, #12]
		USART6->USART_CR2 = ( (USART6->USART_CR2)&(0xFFFFCFFF) ) | ( (a_config->stop_bit)<<12 ); /* Stop bit */
 800144e:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <USART_voidInit+0x508>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	7852      	ldrb	r2, [r2, #1]
 800145a:	0312      	lsls	r2, r2, #12
 800145c:	4611      	mov	r1, r2
 800145e:	4a36      	ldr	r2, [pc, #216]	; (8001538 <USART_voidInit+0x508>)
 8001460:	430b      	orrs	r3, r1
 8001462:	6113      	str	r3, [r2, #16]
		mantisa = ( (F_CK / (a_config->baudrate * 16)) );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4a30      	ldr	r2, [pc, #192]	; (800152c <USART_voidInit+0x4fc>)
 800146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001470:	84fb      	strh	r3, [r7, #38]	; 0x26
		div = ( ( (F_CK / (a_config->baudrate * 16.0)) )*1.0 - mantisa*1.0 ) * 16;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4618      	mov	r0, r3
 8001478:	f7fe fff0 	bl	800045c <__aeabi_ui2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <USART_voidInit+0x500>)
 8001482:	f7ff f865 	bl	8000550 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	a125      	add	r1, pc, #148	; (adr r1, 8001520 <USART_voidInit+0x4f0>)
 800148c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001490:	f7ff f988 	bl	80007a4 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4614      	mov	r4, r2
 800149a:	461d      	mov	r5, r3
 800149c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ffec 	bl	800047c <__aeabi_i2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7fe fe98 	bl	80001e0 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <USART_voidInit+0x500>)
 80014be:	f7ff f847 	bl	8000550 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fa53 	bl	8000974 <__aeabi_d2uiz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		USART6->USART_BRR = div ;
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <USART_voidInit+0x508>)
 80014d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014d6:	6093      	str	r3, [r2, #8]
		USART6->USART_BRR = ( (USART6->USART_BRR)&0x000F ) | ( mantisa << 4 ) ;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <USART_voidInit+0x508>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	4611      	mov	r1, r2
 80014e6:	4a14      	ldr	r2, [pc, #80]	; (8001538 <USART_voidInit+0x508>)
 80014e8:	430b      	orrs	r3, r1
 80014ea:	6093      	str	r3, [r2, #8]
		SET_BIT( USART6->USART_CR1 , 3 ); /* EANBLE Transmitter */
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <USART_voidInit+0x508>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <USART_voidInit+0x508>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	60d3      	str	r3, [r2, #12]
		SET_BIT( USART6->USART_CR1 , 2 ); /* EANBLE Receiver */
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <USART_voidInit+0x508>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <USART_voidInit+0x508>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	60d3      	str	r3, [r2, #12]
		SET_BIT( USART6->USART_CR1 , 13 ); /* EANBLE USART */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <USART_voidInit+0x508>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <USART_voidInit+0x508>)
 800150a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800150e:	60d3      	str	r3, [r2, #12]
		break;
 8001510:	bf00      	nop
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bdb0      	pop	{r4, r5, r7, pc}
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w
 8001520:	00000000 	.word	0x00000000
 8001524:	416e8480 	.word	0x416e8480
 8001528:	40004400 	.word	0x40004400
 800152c:	00f42400 	.word	0x00f42400
 8001530:	40300000 	.word	0x40300000
 8001534:	0800192c 	.word	0x0800192c
 8001538:	40011400 	.word	0x40011400

0800153c <USART_sendWord>:


void USART_sendWord( USART_NUMBER usart_num, u16 a_data )
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	80bb      	strh	r3, [r7, #4]
	switch( usart_num )
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d02e      	beq.n	80015b0 <USART_sendWord+0x74>
 8001552:	2b02      	cmp	r3, #2
 8001554:	dc40      	bgt.n	80015d8 <USART_sendWord+0x9c>
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <USART_sendWord+0x24>
 800155a:	2b01      	cmp	r3, #1
 800155c:	d014      	beq.n	8001588 <USART_sendWord+0x4c>
		while( ! GET_BIT( USART6->USART_SR , 6 ) );
		break;
	}


}
 800155e:	e03b      	b.n	80015d8 <USART_sendWord+0x9c>
		USART1->USART_DR = ( (USART1->USART_DR)&0xFFFFFE00 ) | ( a_data & 0x000001FF ) ;
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <USART_sendWord+0xa8>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	88ba      	ldrh	r2, [r7, #4]
 800156e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001572:	491c      	ldr	r1, [pc, #112]	; (80015e4 <USART_sendWord+0xa8>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
		while( ! GET_BIT( USART1->USART_SR , 6 ) );
 8001578:	bf00      	nop
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <USART_sendWord+0xa8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f9      	beq.n	800157a <USART_sendWord+0x3e>
		break;
 8001586:	e027      	b.n	80015d8 <USART_sendWord+0x9c>
		USART2->USART_DR = ( (USART2->USART_DR)&0xFFFFFE00 ) | ( a_data & 0x000001FF ) ;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <USART_sendWord+0xac>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	88ba      	ldrh	r2, [r7, #4]
 8001596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800159a:	4913      	ldr	r1, [pc, #76]	; (80015e8 <USART_sendWord+0xac>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
		while( ! GET_BIT( USART2->USART_SR , 6 ) );
 80015a0:	bf00      	nop
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <USART_sendWord+0xac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f9      	beq.n	80015a2 <USART_sendWord+0x66>
		break;
 80015ae:	e013      	b.n	80015d8 <USART_sendWord+0x9c>
		USART6->USART_DR = ( (USART6->USART_DR)&0xFFFFFE00 ) | ( a_data & 0x000001FF ) ;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <USART_sendWord+0xb0>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	88ba      	ldrh	r2, [r7, #4]
 80015be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <USART_sendWord+0xb0>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
		while( ! GET_BIT( USART6->USART_SR , 6 ) );
 80015c8:	bf00      	nop
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <USART_sendWord+0xb0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f9      	beq.n	80015ca <USART_sendWord+0x8e>
		break;
 80015d6:	bf00      	nop
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40011000 	.word	0x40011000
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40011400 	.word	0x40011400

080015f0 <USART_sendString>:
	}

}

void USART_sendString( USART_NUMBER usart_num , const u8 *a_data )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
	u16 i=0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	81fb      	strh	r3, [r7, #14]
	while( a_data[i] != '\0' )
 8001600:	e00c      	b.n	800161c <USART_sendString+0x2c>
	{
		USART_sendWord( usart_num , a_data[i] );
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b29a      	uxth	r2, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff93 	bl	800153c <USART_sendWord>
		i++;
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	3301      	adds	r3, #1
 800161a:	81fb      	strh	r3, [r7, #14]
	while( a_data[i] != '\0' )
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ec      	bne.n	8001602 <USART_sendString+0x12>
	}
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <main>:

#include "queue.h"
#include "APP.h"

int main(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0

	APP_Init();
 8001638:	f7ff fa28 	bl	8000a8c <APP_Init>


	while(1)
	{

		if( NUMBER_OF_SAMPLES_TO_SEND_DATA == queue_size() ) /* Send data */
 800163c:	f000 f8a4 	bl	8001788 <queue_size>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d1fa      	bne.n	800163c <main+0xa>
		{
			QUEUE_DATATYPE data[NUMBER_OF_SAMPLES_TO_SEND_DATA];
			for(u16 i=0 ; i<NUMBER_OF_SAMPLES_TO_SEND_DATA ; i++ )
 8001646:	2300      	movs	r3, #0
 8001648:	80fb      	strh	r3, [r7, #6]
 800164a:	e009      	b.n	8001660 <main+0x2e>
			    dequeue( data+i );
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	463a      	mov	r2, r7
 8001652:	4413      	add	r3, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f859 	bl	800170c <dequeue>
			for(u16 i=0 ; i<NUMBER_OF_SAMPLES_TO_SEND_DATA ; i++ )
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	3301      	adds	r3, #1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f2      	beq.n	800164c <main+0x1a>
			/*Send data*/
			APP_send_data( data , NUMBER_OF_SAMPLES_TO_SEND_DATA );
 8001666:	463b      	mov	r3, r7
 8001668:	2101      	movs	r1, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fa62 	bl	8000b34 <APP_send_data>
		if( NUMBER_OF_SAMPLES_TO_SEND_DATA == queue_size() ) /* Send data */
 8001670:	e7e4      	b.n	800163c <main+0xa>
	...

08001674 <Queue_init>:
static u16 queue_front;
static s16 queue_counter;
static QUEUE_DATATYPE queue_array[QUEUE_SIZE];

void Queue_init()
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	queue_front = 0;
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <Queue_init+0x1c>)
 800167a:	2200      	movs	r2, #0
 800167c:	801a      	strh	r2, [r3, #0]
	queue_rear = 0;
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <Queue_init+0x20>)
 8001680:	2200      	movs	r2, #0
 8001682:	801a      	strh	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000032 	.word	0x20000032
 8001694:	20000030 	.word	0x20000030

08001698 <enqueue>:

void enqueue(QUEUE_DATATYPE *a_data)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	if( queue_counter == QUEUE_SIZE ) /* queue is full */
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <enqueue+0x64>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d008      	beq.n	80016bc <enqueue+0x24>
	{

	}else
		queue_counter++;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <enqueue+0x64>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <enqueue+0x64>)
 80016ba:	801a      	strh	r2, [r3, #0]

	queue_array[queue_rear] = *a_data;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <enqueue+0x68>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <enqueue+0x6c>)
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	460a      	mov	r2, r1
 80016ca:	6810      	ldr	r0, [r2, #0]
 80016cc:	6018      	str	r0, [r3, #0]
	queue_rear = (queue_rear+1)%QUEUE_SIZE; /*To make queue cycler*/
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <enqueue+0x68>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <enqueue+0x70>)
 80016d6:	fb82 1203 	smull	r1, r2, r2, r3
 80016da:	1151      	asrs	r1, r2, #5
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	1a8a      	subs	r2, r1, r2
 80016e0:	2164      	movs	r1, #100	; 0x64
 80016e2:	fb01 f202 	mul.w	r2, r1, r2
 80016e6:	1a9a      	subs	r2, r3, r2
 80016e8:	b292      	uxth	r2, r2
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <enqueue+0x68>)
 80016ec:	801a      	strh	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000034 	.word	0x20000034
 8001700:	20000030 	.word	0x20000030
 8001704:	20000038 	.word	0x20000038
 8001708:	51eb851f 	.word	0x51eb851f

0800170c <dequeue>:

u8 dequeue( QUEUE_DATATYPE *a_data )
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if( queue_counter == 0 ) /* queue is empty */
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <dequeue+0x6c>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <dequeue+0x16>
	{
        return -1;
 800171e:	23ff      	movs	r3, #255	; 0xff
 8001720:	e023      	b.n	800176a <dequeue+0x5e>
	}else
		queue_counter--;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <dequeue+0x6c>)
 8001724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b01      	subs	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	b21a      	sxth	r2, r3
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <dequeue+0x6c>)
 8001732:	801a      	strh	r2, [r3, #0]

	u16 x =queue_front;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <dequeue+0x70>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	81fb      	strh	r3, [r7, #14]
	queue_front = (queue_front+1)%QUEUE_SIZE ;  /*To make queue cycler*/
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <dequeue+0x70>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <dequeue+0x74>)
 8001742:	fb82 1203 	smull	r1, r2, r2, r3
 8001746:	1151      	asrs	r1, r2, #5
 8001748:	17da      	asrs	r2, r3, #31
 800174a:	1a8a      	subs	r2, r1, r2
 800174c:	2164      	movs	r1, #100	; 0x64
 800174e:	fb01 f202 	mul.w	r2, r1, r2
 8001752:	1a9a      	subs	r2, r3, r2
 8001754:	b292      	uxth	r2, r2
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <dequeue+0x70>)
 8001758:	801a      	strh	r2, [r3, #0]
	*a_data = queue_array[x];
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <dequeue+0x78>)
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	6008      	str	r0, [r1, #0]
	return 1;
 8001768:	2301      	movs	r3, #1

}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000034 	.word	0x20000034
 800177c:	20000032 	.word	0x20000032
 8001780:	51eb851f 	.word	0x51eb851f
 8001784:	20000038 	.word	0x20000038

08001788 <queue_size>:

u16 queue_size()
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	return queue_counter;
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <queue_size+0x18>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	b29b      	uxth	r3, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000034 	.word	0x20000034

080017a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017d2:	f000 f86d 	bl	80018b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d6:	f7ff ff2c 	bl	8001632 <main>

080017da <LoopForever>:

LoopForever:
  b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   r0, =_estack
 80017dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017e8:	08001960 	.word	0x08001960
  ldr r2, =_sbss
 80017ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017f0:	200001c8 	.word	0x200001c8

080017f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>

080017f6 <__itoa>:
 80017f6:	1e93      	subs	r3, r2, #2
 80017f8:	2b22      	cmp	r3, #34	; 0x22
 80017fa:	b510      	push	{r4, lr}
 80017fc:	460c      	mov	r4, r1
 80017fe:	d904      	bls.n	800180a <__itoa+0x14>
 8001800:	2300      	movs	r3, #0
 8001802:	700b      	strb	r3, [r1, #0]
 8001804:	461c      	mov	r4, r3
 8001806:	4620      	mov	r0, r4
 8001808:	bd10      	pop	{r4, pc}
 800180a:	2a0a      	cmp	r2, #10
 800180c:	d109      	bne.n	8001822 <__itoa+0x2c>
 800180e:	2800      	cmp	r0, #0
 8001810:	da07      	bge.n	8001822 <__itoa+0x2c>
 8001812:	232d      	movs	r3, #45	; 0x2d
 8001814:	700b      	strb	r3, [r1, #0]
 8001816:	4240      	negs	r0, r0
 8001818:	2101      	movs	r1, #1
 800181a:	4421      	add	r1, r4
 800181c:	f000 f806 	bl	800182c <__utoa>
 8001820:	e7f1      	b.n	8001806 <__itoa+0x10>
 8001822:	2100      	movs	r1, #0
 8001824:	e7f9      	b.n	800181a <__itoa+0x24>

08001826 <itoa>:
 8001826:	f7ff bfe6 	b.w	80017f6 <__itoa>
	...

0800182c <__utoa>:
 800182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182e:	4c1f      	ldr	r4, [pc, #124]	; (80018ac <__utoa+0x80>)
 8001830:	b08b      	sub	sp, #44	; 0x2c
 8001832:	4605      	mov	r5, r0
 8001834:	460b      	mov	r3, r1
 8001836:	466e      	mov	r6, sp
 8001838:	f104 0c20 	add.w	ip, r4, #32
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	6861      	ldr	r1, [r4, #4]
 8001840:	4637      	mov	r7, r6
 8001842:	c703      	stmia	r7!, {r0, r1}
 8001844:	3408      	adds	r4, #8
 8001846:	4564      	cmp	r4, ip
 8001848:	463e      	mov	r6, r7
 800184a:	d1f7      	bne.n	800183c <__utoa+0x10>
 800184c:	7921      	ldrb	r1, [r4, #4]
 800184e:	7139      	strb	r1, [r7, #4]
 8001850:	1e91      	subs	r1, r2, #2
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	6038      	str	r0, [r7, #0]
 8001856:	2922      	cmp	r1, #34	; 0x22
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	d904      	bls.n	8001868 <__utoa+0x3c>
 800185e:	7019      	strb	r1, [r3, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	4618      	mov	r0, r3
 8001864:	b00b      	add	sp, #44	; 0x2c
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	1e58      	subs	r0, r3, #1
 800186a:	4684      	mov	ip, r0
 800186c:	fbb5 f7f2 	udiv	r7, r5, r2
 8001870:	fb02 5617 	mls	r6, r2, r7, r5
 8001874:	3628      	adds	r6, #40	; 0x28
 8001876:	446e      	add	r6, sp
 8001878:	460c      	mov	r4, r1
 800187a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800187e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8001882:	462e      	mov	r6, r5
 8001884:	42b2      	cmp	r2, r6
 8001886:	f101 0101 	add.w	r1, r1, #1
 800188a:	463d      	mov	r5, r7
 800188c:	d9ee      	bls.n	800186c <__utoa+0x40>
 800188e:	2200      	movs	r2, #0
 8001890:	545a      	strb	r2, [r3, r1]
 8001892:	1919      	adds	r1, r3, r4
 8001894:	1aa5      	subs	r5, r4, r2
 8001896:	42aa      	cmp	r2, r5
 8001898:	dae3      	bge.n	8001862 <__utoa+0x36>
 800189a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800189e:	780e      	ldrb	r6, [r1, #0]
 80018a0:	7006      	strb	r6, [r0, #0]
 80018a2:	3201      	adds	r2, #1
 80018a4:	f801 5901 	strb.w	r5, [r1], #-1
 80018a8:	e7f4      	b.n	8001894 <__utoa+0x68>
 80018aa:	bf00      	nop
 80018ac:	08001933 	.word	0x08001933

080018b0 <__libc_init_array>:
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	4d0d      	ldr	r5, [pc, #52]	; (80018e8 <__libc_init_array+0x38>)
 80018b4:	4c0d      	ldr	r4, [pc, #52]	; (80018ec <__libc_init_array+0x3c>)
 80018b6:	1b64      	subs	r4, r4, r5
 80018b8:	10a4      	asrs	r4, r4, #2
 80018ba:	2600      	movs	r6, #0
 80018bc:	42a6      	cmp	r6, r4
 80018be:	d109      	bne.n	80018d4 <__libc_init_array+0x24>
 80018c0:	4d0b      	ldr	r5, [pc, #44]	; (80018f0 <__libc_init_array+0x40>)
 80018c2:	4c0c      	ldr	r4, [pc, #48]	; (80018f4 <__libc_init_array+0x44>)
 80018c4:	f000 f818 	bl	80018f8 <_init>
 80018c8:	1b64      	subs	r4, r4, r5
 80018ca:	10a4      	asrs	r4, r4, #2
 80018cc:	2600      	movs	r6, #0
 80018ce:	42a6      	cmp	r6, r4
 80018d0:	d105      	bne.n	80018de <__libc_init_array+0x2e>
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d8:	4798      	blx	r3
 80018da:	3601      	adds	r6, #1
 80018dc:	e7ee      	b.n	80018bc <__libc_init_array+0xc>
 80018de:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e2:	4798      	blx	r3
 80018e4:	3601      	adds	r6, #1
 80018e6:	e7f2      	b.n	80018ce <__libc_init_array+0x1e>
 80018e8:	08001958 	.word	0x08001958
 80018ec:	08001958 	.word	0x08001958
 80018f0:	08001958 	.word	0x08001958
 80018f4:	0800195c 	.word	0x0800195c

080018f8 <_init>:
 80018f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fa:	bf00      	nop
 80018fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fe:	bc08      	pop	{r3}
 8001900:	469e      	mov	lr, r3
 8001902:	4770      	bx	lr

08001904 <_fini>:
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001906:	bf00      	nop
 8001908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190a:	bc08      	pop	{r3}
 800190c:	469e      	mov	lr, r3
 800190e:	4770      	bx	lr
